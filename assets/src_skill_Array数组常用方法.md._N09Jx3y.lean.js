import{_ as a,c as n,a2 as l,o as p}from"./chunks/framework.DPuwY6B9.js";const d=JSON.parse('{"title":"Array 数组常用方法","description":"","frontmatter":{},"headers":[],"relativePath":"src/skill/Array数组常用方法.md","filePath":"src/skill/Array数组常用方法.md","lastUpdated":1714114110000}'),e={name:"src/skill/Array数组常用方法.md"};function o(r,s,c,t,i,y){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="array-数组常用方法" tabindex="-1">Array 数组常用方法 <a class="header-anchor" href="#array-数组常用方法" aria-label="Permalink to &quot;Array 数组常用方法&quot;">​</a></h1><h2 id="复杂对象数组去重" tabindex="-1">复杂对象数组去重 <a class="header-anchor" href="#复杂对象数组去重" aria-label="Permalink to &quot;复杂对象数组去重&quot;">​</a></h2><h3 id="单个复杂对象数组去重" tabindex="-1">单个复杂对象数组去重 <a class="header-anchor" href="#单个复杂对象数组去重" aria-label="Permalink to &quot;单个复杂对象数组去重&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;ls&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">obj[item.id]) {</span></span>
<span class="line"><span style="color:#24292E;">    obj[item.id] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span></span>
<span class="line"><span style="color:#24292E;">    pre.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> pre</span></span>
<span class="line"><span style="color:#24292E;">}, [])</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr) </span><span style="color:#6A737D;">// {id: 1, name: &#39;zs&#39;}{id: 2, name: &#39;ls&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="两个复杂对象数组内相同的元素删除" tabindex="-1">两个复杂对象数组内相同的元素删除 <a class="header-anchor" href="#两个复杂对象数组内相同的元素删除" aria-label="Permalink to &quot;两个复杂对象数组内相同的元素删除&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 例如下方两个数组删除相同元素之后 arr1 剩下【赵六】和【孙七】 arr2 剩下【王五】</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr1</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { pid: </span><span style="color:#032F62;">&#39;2023&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { pid: </span><span style="color:#032F62;">&#39;2024&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;李四&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { pid: </span><span style="color:#032F62;">&#39;2026&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;赵六&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { pid: </span><span style="color:#032F62;">&#39;2027&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;孙七&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr2</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#032F62;">&#39;2024&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;李四&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#032F62;">&#39;2023&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { id: </span><span style="color:#032F62;">&#39;2025&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;王五&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arrId</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr2.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> item.id)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> someArr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr1.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> arrId.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(item.pid))</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> someId</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> someArr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> item.pid)</span></span>
<span class="line"><span style="color:#24292E;">arr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr1.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">someId.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(item.pid))</span></span>
<span class="line"><span style="color:#24292E;">arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr2.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">someId.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(item.id))</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr1, arr2) </span><span style="color:#6A737D;">// arr1 [{ pid: &#39;2026&#39;, name: &#39;赵六&#39; },{ pid: &#39;2027&#39;, name: &#39;孙七&#39; }] arr2 [{ id: &#39;2025&#39;, name: &#39;王五&#39; }]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="根据数组的相同项对数组进行重构" tabindex="-1">根据数组的相同项对数组进行重构 <a class="header-anchor" href="#根据数组的相同项对数组进行重构" aria-label="Permalink to &quot;根据数组的相同项对数组进行重构&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { time: </span><span style="color:#032F62;">&#39;2022-11-1&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { time: </span><span style="color:#032F62;">&#39;2022-11-1&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;李四&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { time: </span><span style="color:#032F62;">&#39;2022-11-2&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;王五&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { time: </span><span style="color:#032F62;">&#39;2022-11-2&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;赵六&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { time: </span><span style="color:#032F62;">&#39;2022-11-3&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;孙七&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> timeArr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#6F42C1;"> Set</span><span style="color:#24292E;">(arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> item.time))]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">timeArr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  newArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ time: item, list: [] })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">newArr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">it</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (it.time </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> item.time) {</span></span>
<span class="line"><span style="color:#24292E;">      it.list.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: item.name })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newArr)</span></span>
<span class="line"><span style="color:#6A737D;">// 重构后的数组</span></span>
<span class="line"><span style="color:#6A737D;">// [</span></span>
<span class="line"><span style="color:#6A737D;">// {time: &#39;2022-11-1&#39;, list: [ {naem: &#39;张三&#39;}， {name: &#39;李四&#39;} ]},</span></span>
<span class="line"><span style="color:#6A737D;">// {time: &#39;2022-11-2&#39;, list: [ {naem: &#39;王五&#39;}， {name: &#39;赵六&#39;} ]},</span></span>
<span class="line"><span style="color:#6A737D;">// {time: &#39;2022-11-3&#39;, list: [ {naem: &#39;孙七&#39;}]}</span></span>
<span class="line"><span style="color:#6A737D;">// ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="常用方法-不改变原数组" tabindex="-1">常用方法（不改变原数组） <a class="header-anchor" href="#常用方法-不改变原数组" aria-label="Permalink to &quot;常用方法（不改变原数组）&quot;">​</a></h2><h3 id="concat" tabindex="-1">concat() <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat()&quot;">​</a></h3><p><code>concat()</code> 方法用于连接两个或多个字符串或数组。</p><p>该方法没有改变原数据，会返回新字符串或数组。</p><h3 id="every" tabindex="-1">every() <a class="header-anchor" href="#every" aria-label="Permalink to &quot;every()&quot;">​</a></h3><p><code>every()</code> 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p><p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true。</p><p><code>数组.every </code>常用来判断是否全选，只有条件全部满足才返回 true</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">{id：</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">{id：</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">{id：</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> result</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">item.state) </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="some" tabindex="-1">some() <a class="header-anchor" href="#some" aria-label="Permalink to &quot;some()&quot;">​</a></h3><p><code>some()</code> 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>如果有一个元素满足条件，则表达式返回 true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回 false</p><p><code>some()</code> 不会对空数组进行检测。</p><p><code>数组.forEach </code>方法会循环数组，且会进行一个完整的循环，无法被终止，浪费性能</p><p><code>数组.some </code>方法在找到数据后就可以使用 <code>return true</code> 终止 <code>some</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(item </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;3&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    retuen </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="filter" tabindex="-1">filter() <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter()&quot;">​</a></h3><p><code>filter()</code> 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><code>filter() </code>不会对空数组进行检测。</p><p><code>filter()</code> 方法可以过滤符合条件的数值，返回一个新数组，可以利用 filter 和 indexOf 进行数组去重操作</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(item) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">}) </span><span style="color:#6A737D;">//arr--[1,2,3,4,&#39;a&#39;,&#39;b&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="map" tabindex="-1">map() <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map()&quot;">​</a></h3><p><code>map()</code> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p><code>map()</code> 方法按照原始数组元素顺序依次处理元素。</p><p><code>map()</code> 不会对空数组进行检测。</p><h3 id="slice" tabindex="-1">slice() <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice()&quot;">​</a></h3><p><code>slice()</code> 方法可从已有的数组中返回选定的元素或提取字符串的某个部分，并以新的字符串返回被提取的部分。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> originalArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> newArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> originalArray.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newArray) </span><span style="color:#6A737D;">//输出: [2,3,4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="reduce" tabindex="-1">reduce() <a class="header-anchor" href="#reduce" aria-label="Permalink to &quot;reduce()&quot;">​</a></h3><p>数组.reduce 是一个函数循环累加器</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {id：</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;西瓜&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,price:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,count:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">  {id：</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;榴莲&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,price:</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,count:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">  {id：</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">，name:</span><span style="color:#032F62;">&#39;草莓&#39;</span><span style="color:#24292E;">,state:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,price:</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,count:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//累加选中的水果价格</span></span>
<span class="line"><span style="color:#6A737D;">//普通做法</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">item.state).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> item.price</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">item.count</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//使用 reduce,不用在外面定义 sum，直接在方法内定义</span></span>
<span class="line"><span style="color:#6A737D;">//arr.filter(item=&gt;item.state).reduce((结果，item)=&gt;{}，初始值)</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">item.state).</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">sum</span><span style="color:#24292E;">，</span><span style="color:#E36209;">item</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> item.price</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">item.count</span></span>
<span class="line"><span style="color:#24292E;">}，</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="会改变原数组的方法" tabindex="-1">会改变原数组的方法 <a class="header-anchor" href="#会改变原数组的方法" aria-label="Permalink to &quot;会改变原数组的方法&quot;">​</a></h2><h3 id="shift" tabindex="-1">shift() <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift()&quot;">​</a></h3><p><code>shift()</code> 方法用于把数组的第一个元素从其中删除并返回删除的元素。</p><h3 id="pop" tabindex="-1">pop() <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop()&quot;">​</a></h3><p><code>pop()</code> 方法用于删除数组的最后一个元素并返回删除的元素</p><h3 id="push" tabindex="-1">push() <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push()&quot;">​</a></h3><p><code>push()</code> 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p><h3 id="unshift" tabindex="-1">unshift() <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift()&quot;">​</a></h3><p><code>unshift()</code> 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p><h3 id="reverse" tabindex="-1">reverse() <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse()&quot;">​</a></h3><p><code>reverse()</code> 方法用于颠倒数组中元素的顺序。</p><h3 id="sort" tabindex="-1">sort() <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort()&quot;">​</a></h3><p><code>sort()</code> 方法用于对数组的元素进行排序。</p><p>排序顺序可以是字母或数字，并按升序或降序，默认排序顺序为按字母升序。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myarr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">myarr1.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myarr1) </span><span style="color:#6A737D;">//(5) [&#39;e&#39;, &#39;h&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myarr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">myarr2.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myarr2) </span><span style="color:#6A737D;">//(5) [1, 4, 5, 6, 9]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用数字排序，你必须通过一个函数作为参数来调用。</p><p>函数指定数字是按照升序还是降序。</p><h3 id="splice" tabindex="-1">splice() <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice()&quot;">​</a></h3><p>splice() 方法用于添加或删除数组中的元素。</p><p><strong>删除</strong> 一个参数（要删除第一项的位置），第二个参数（要删除的项数）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;aaa&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bbb&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ccc&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;111&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;22&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;333&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> newArr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// arr: [aaa,bbb,22,333]; newArr: [ccc,111]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>添加</strong> 三个参数，第一个参数（其实位置），第二个参数（截取的元素个数），剩下参数（插入的项）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//从下标为2的地方截取1个元素，并添加两个元素</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr) </span><span style="color:#6A737D;">//a,b,w,z,d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,63)]))}const E=a(e,[["render",o]]);export{d as __pageData,E as default};
