import{_ as n,c as a,a2 as p,o as l}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Axios 基础","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/Axios基础.md","filePath":"src/base/Axios基础.md","lastUpdated":1713863841000}'),e={name:"src/base/Axios基础.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="axios-基础" tabindex="-1">Axios 基础 <a class="header-anchor" href="#axios-基础" aria-label="Permalink to &quot;Axios 基础&quot;">​</a></h1><p>axios 是一个专注于网络请求的库，基本语法如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">axios</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  method:</span><span style="color:#032F62;">&#39;post/get&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  url:</span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">，</span></span>
<span class="line"><span style="color:#6A737D;">  //url 中带的参数即 get 传递的数据</span></span>
<span class="line"><span style="color:#24292E;">  params：{}，</span></span>
<span class="line"><span style="color:#6A737D;">  //post 传递的参数即请求体参数</span></span>
<span class="line"><span style="color:#24292E;">  data:{},</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">result</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">  //.then 用来指定请求成功后的回调函数</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>promise 对象可以调用 then 方法，axios 返回的真实数据在 xxx.data 下</p><p>如果调用某个方法返回的是 promise 方法，前面可以加 await</p><p>await 方法只能用用在被 async 修饰的方法中</p><p>使用结构赋值把请求的大对象的 data 属性（即真实的数据）解构出来，再进行重命名，最后通过重命名的对象的 data 中拿出数据</p><p>解构赋值可以使用:进行重命名</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">data</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">res</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#6F42C1;"> axios</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  method:</span><span style="color:#032F62;">&#39;post/get&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  url:</span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">，</span></span>
<span class="line"><span style="color:#6A737D;">  //url 中带的参数即 get 传递的数据</span></span>
<span class="line"><span style="color:#24292E;">  params：{}，</span></span>
<span class="line"><span style="color:#6A737D;">  //post 传递的参数即请求体参数</span></span>
<span class="line"><span style="color:#24292E;">  data:{},</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">consolr.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res.data);</span></span>
<span class="line"><span style="color:#6A737D;">// axious.get</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">data</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">res</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;url&#39;</span><span style="color:#24292E;">,{</span></span>
<span class="line"><span style="color:#24292E;">  params:{</span></span>
<span class="line"><span style="color:#6A737D;">  //参数</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// axious.post</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">data</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">res</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> await</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;url&#39;</span><span style="color:#24292E;">,{params})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="简化-axios-请求" tabindex="-1">简化 axios 请求 <a class="header-anchor" href="#简化-axios-请求" aria-label="Permalink to &quot;简化 axios 请求&quot;">​</a></h2><p>在 vue 的原型上挂载 axios，后续组件需要使用则不需要导入 axios，直接调用 this.$http，方法是在 main 方法内导入 axios 并使用原型挂载，并将请求路径进行全局配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//在 main.js 导入 axios</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;axios&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//配置根路径</span></span>
<span class="line"><span style="color:#24292E;">axios.defaults.baseURL </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;根路径&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//把 axios 挂载到.vue 原型</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$http </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios</span></span>
<span class="line"><span style="color:#6A737D;">// 此方法的缺点是无法实现 API 接口的复用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 封装 request.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;axios&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> request</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  baseURL: </span><span style="color:#032F62;">&#39;https://www.escook.cn&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> request</span></span>
<span class="line"><span style="color:#6A737D;">// 封装发请求的函数</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;@/utils/request.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 按需导出 api</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#6F42C1;"> getArticleAPI</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/articles&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    params: {</span></span>
<span class="line"><span style="color:#24292E;">      data</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在需要使用 api 的组件内按需导入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { getArticleAPI } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;@/api/articleAPI.JS&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,12)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
