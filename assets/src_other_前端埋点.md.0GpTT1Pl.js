import{_ as n,c as a,a2 as p,o as l}from"./chunks/framework.DPuwY6B9.js";const m=JSON.parse('{"title":"前端埋点","description":"","frontmatter":{},"headers":[],"relativePath":"src/other/前端埋点.md","filePath":"src/other/前端埋点.md","lastUpdated":1714114110000}'),e={name:"src/other/前端埋点.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="前端埋点" tabindex="-1">前端埋点 <a class="header-anchor" href="#前端埋点" aria-label="Permalink to &quot;前端埋点&quot;">​</a></h1><p>前端监控和前端埋点，一个是目的，一个是实现方式，做前端埋点，是为了做前端监控，那为什么要做前端监控呢</p><h2 id="前端监控的目的" tabindex="-1">前端监控的目的 <a class="header-anchor" href="#前端监控的目的" aria-label="Permalink to &quot;前端监控的目的&quot;">​</a></h2><p>获取用户行为以及跟踪产品在用户端的使用情况，并以监控数据为基础，指明产品优化的方向。</p><p>前端监控可以分为三类：数据监控、性能监控和异常监控。</p><h3 id="数据监控" tabindex="-1">数据监控 <a class="header-anchor" href="#数据监控" aria-label="Permalink to &quot;数据监控&quot;">​</a></h3><p>数据监控，就是监听用户的行为，常见的监控项有：</p><p>1、PV(page view)：即页面浏览量或点击量</p><p>2、UV(user view)：指访问某个站点或点击某条新闻的不同 IP 地址的人数</p><p>3、用户在每一个页面的停留时间</p><p>4、用户通过什么入口来访问该网页</p><p>5、用户在相应的页面中触发的行为</p><p>统计这些数据是有意义的，比如我们知道了用户来源的渠道，可以促进产品的推广，知道用户在每一个页面停留的时间，可以针对停留较长的页面，增加广告推送等等。</p><h3 id="性能监控" tabindex="-1">性能监控 <a class="header-anchor" href="#性能监控" aria-label="Permalink to &quot;性能监控&quot;">​</a></h3><p>性能监控指的是监听前端的性能，主要包括监听网页或者说产品在用户端的体验。常见的性能监控项包括：</p><p>1、不同用户，不同机型和不同系统下的首屏加载时间</p><p>2、白屏时间</p><p>3、http 等请求的响应时间</p><p>4、静态资源整体下载时间</p><p>5、页面渲染时间</p><p>6、页面交互动画完成时间</p><p>这些性能监控的结果，可以展示前端性能的好坏，根据性能监测的结果可以进一步的去优化前端性能，比如兼容低版本浏览器的动画效果，加快首屏加载等等。</p><h3 id="异常监控" tabindex="-1">异常监控 <a class="header-anchor" href="#异常监控" aria-label="Permalink to &quot;异常监控&quot;">​</a></h3><p>由于产品的前端代码在执行过程中也会发生异常，因此需要引入异常监控。及时的上报异常情况，可以避免线上故障的发上。虽然大部分异常可以通过 <code>try catch</code> 的方式捕获，但是比如内存泄漏以及其他偶现的异常难以捕获。常见的需要监控的异常包括：</p><p>1、Javascript 的异常监控</p><p>2、样式丢失的异常监控</p><h2 id="前端埋点-1" tabindex="-1">前端埋点 <a class="header-anchor" href="#前端埋点-1" aria-label="Permalink to &quot;前端埋点&quot;">​</a></h2><p>我们说完了前端监控的三个分类，现在就来聊聊怎么实现前端监控。实现前端监控，第一步肯定是将我们要监控的事项（数据）给收集起来，再提交给后台，最后进行数据分析。数据收集的丰富性和准确性会直接影响到我们做前端监控的质量，因为我们会以此为基础，为产品的未来发展指引方向。</p><p>收集监控数据我们是通过前端埋点来实现的，目前常见的前端埋点方法有三种：手动埋点、可视化埋点和无埋点。</p><h3 id="手动埋点" tabindex="-1">手动埋点 <a class="header-anchor" href="#手动埋点" aria-label="Permalink to &quot;手动埋点&quot;">​</a></h3><p>手动埋点，也叫代码埋点，即纯手动写代码，调用埋点 <code>SDK</code> 的函数，在需要埋点的业务逻辑功能位置调用接口，上报埋点数据，像友盟、百度统计等第三方数据统计服务商大都采用这种方案。</p><p>手动埋点让使用者可以方便地设置自定义属性、自定义事件；所以当你需要深入下钻，并精细化自定义分析时，比较适合使用手动埋点。</p><p>手动埋点的缺陷就是，项目工程量大，需要埋点的位置太多，而且需要产品开发运营之间相互反复沟通，容易出现手动差错，如果错误，重新埋点的成本也很高。这会导致整个数据收集周期变的很长，收集成本变的很高，而且效率很低。因为手动埋点需要开发人员完成，所以每次有埋点更新，或者漏埋点，都需要重新走上线发布流程，更新成本也高，对线上系统稳定性也有一定危害。</p><h3 id="可视化埋点" tabindex="-1">可视化埋点 <a class="header-anchor" href="#可视化埋点" aria-label="Permalink to &quot;可视化埋点&quot;">​</a></h3><p>通过可视化交互的手段，代替上述的代码埋点。将业务代码和埋点代码分离，提供一个可视化交互的页面，输入为业务代码，通过这个可视化系统，可以在业务代码中自定义的增加埋点事件等等，最后输出的代码耦合了业务代码和埋点代码。缺点就是可以埋点的控件有限，不能手动定制。</p><p>可视化埋点听起来比较高大上，实际上跟代码埋点还是区别不大。也就是用一个系统来实现手动插入代码埋点的过程。比如国外比较早做可视化的是 Mixpanel，国内较早支持可视化埋点的有 TalkingData、诸葛 IO，2017 年腾讯的 MTA 也宣布支持可视化埋点；相比于手动埋点更新困难，埋点成本高的问题，可视化埋点优化了移动运营中数据采集的流程，能够支持产品运营随时调整埋点，无需再走发版流程，直接把配置结果推入到前端，数据采集流程更简化，也更方便产品的迭代。</p><p>可视化埋点中多数基于 <code>Xpath</code> 的方案，<code>XPath</code> 是一门在 XML 文档中查找信息的语言，<code>XPath</code> 可用来在 XML 文档中对元素和属性进行遍历。</p><h3 id="无埋点" tabindex="-1">无埋点 <a class="header-anchor" href="#无埋点" aria-label="Permalink to &quot;无埋点&quot;">​</a></h3><p>无埋点则是前端自动采集全部事件，上报埋点数据，由后端来过滤和计算出有用的数据。优点是前端只要一次加载埋点脚本，缺点是流量和采集的数据过于庞大，服务器性能压力山大。</p><p>采用无埋点技术的有主流的 GrowingIO、神策。</p><h2 id="总结代码实现" tabindex="-1">总结代码实现 <a class="header-anchor" href="#总结代码实现" aria-label="Permalink to &quot;总结代码实现&quot;">​</a></h2><p>在不同场景下我们需要选择不同的埋点方案。例如对于简单的用户行为类事件，可以使用全埋点解决；而对于需要携带大量运行时才可获知的业务字段的埋点需求，就需要声明式埋点来解决。</p><h3 id="收集用户信息" tabindex="-1">收集用户信息 <a class="header-anchor" href="#收集用户信息" aria-label="Permalink to &quot;收集用户信息&quot;">​</a></h3><p>通过浏览器内置的 <code>JavaScript</code> 对象，我们就可以收集当前用户的一些基本信息，我们将收集好的数据通过 <code>Image</code> 对象实例的 <code>src</code> 属性指向后端脚本并携带参数，就可以将我们收集的数据传给后端，之所以用 <code>Image</code> 对象而不是 <code>ajax</code>，是为了避免跨域的问题。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">  // document</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (document) {</span></span>
<span class="line"><span style="color:#24292E;">    params.domain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.domain </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#6A737D;"> // 域名</span></span>
<span class="line"><span style="color:#24292E;">    params.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#005CC5;">URL</span><span style="color:#D73A49;"> ||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#6A737D;"> // 当前 URL 地址</span></span>
<span class="line"><span style="color:#24292E;">    params.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.title </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#6A737D;"> // 当前页面标题</span></span>
<span class="line"><span style="color:#24292E;">    params.referrer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.referrer </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#6A737D;"> // 上一个访问页面 URL 地址</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // window</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (window </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> window.screen) {</span></span>
<span class="line"><span style="color:#24292E;">    params.sh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.screen.height </span><span style="color:#D73A49;">||</span><span style="color:#005CC5;"> 0</span><span style="color:#6A737D;"> // 屏幕高度</span></span>
<span class="line"><span style="color:#24292E;">    params.sw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.screen.width </span><span style="color:#D73A49;">||</span><span style="color:#005CC5;"> 0</span><span style="color:#6A737D;"> // 屏幕宽度</span></span>
<span class="line"><span style="color:#24292E;">    params.cd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.screen.colorDepth </span><span style="color:#D73A49;">||</span><span style="color:#005CC5;"> 0</span><span style="color:#6A737D;"> // 屏幕颜色深度</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // navigator</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (navigator) {</span></span>
<span class="line"><span style="color:#24292E;">    params.lang </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigator.language </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#6A737D;"> // 语言</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 拼接参数</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> params) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;"> &#39;&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      args </span><span style="color:#D73A49;">+=</span><span style="color:#032F62;"> &#39;&amp;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    args </span><span style="color:#D73A49;">+=</span><span style="color:#032F62;"> \`\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">params</span><span style="color:#032F62;">[</span><span style="color:#24292E;">i</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // 通过伪装成 Image 对象，传递给后端</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Image</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> src </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`http://www.funlee.cn/api/test.jpg?args=\${</span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#032F62;">(</span><span style="color:#24292E;">args</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> src</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>可以根据具体的实际需求，利用 JavaScript 的内置 API，还可以获取到更多的信息。</p><p>通过 script 标签引入埋点代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">(function() {</span></span>
<span class="line"><span style="color:#24292E;">    let hm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    hm.type </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;text/javascript&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    hm.async </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    hm.src </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;http://www.funlee.cn/testAnalyze.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    let s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    s.parentNode.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(hm, s);</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="获取-web-各阶段响应时间" tabindex="-1">获取 web 各阶段响应时间 <a class="header-anchor" href="#获取-web-各阶段响应时间" aria-label="Permalink to &quot;获取 web 各阶段响应时间&quot;">​</a></h3><p>为了准确获取我们的 web 应用程序的性能特性，我们就得知道该应用程序在各个阶段的响应时间，比如：DNS 解析时间、TCP 建立连接时间、首页白屏时间、DOM 渲染完成时间、页面 load 时间等。好在这些信息都可以通过 Performance 接口获取相关信息来计算得出。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> performance.timing,</span></span>
<span class="line"><span style="color:#24292E;">  start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.navigationStart,</span></span>
<span class="line"><span style="color:#24292E;">  dnsTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  tcpTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  firstPaintTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  domRenderTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  loadTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dnsTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.domainLookupEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timing.domainLookupStart</span></span>
<span class="line"><span style="color:#24292E;">tcpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.connectEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timing.connectStart</span></span>
<span class="line"><span style="color:#24292E;">firstPaintTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.responseStart </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">domRenderTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.domContentLoadedEventEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">loadTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timing.loadEventEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DNS 解析时间:&#39;</span><span style="color:#24292E;">, dnsTime, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">TCP 建立时间:&#39;</span><span style="color:#24292E;">, tcpTime, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> 首屏时间:&#39;</span><span style="color:#24292E;">, firstPaintTime, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">dom 渲染完成时间:&#39;</span><span style="color:#24292E;">, domRenderTime, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> 页面 onload 时间:&#39;</span><span style="color:#24292E;">, loadTime)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="css-埋点" tabindex="-1">CSS 埋点 <a class="header-anchor" href="#css-埋点" aria-label="Permalink to &quot;CSS 埋点&quot;">​</a></h3><p>没错，CSS 也能做埋点，这个算是一个小技巧，当然，CSS 埋点只能处理一些简单的事件埋点，收集复杂的数据还是得用 JS，但 CSS 埋点有个优点就是，无法被禁用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">.link:active::after{</span></span>
<span class="line"><span style="color:#24292E;">    color: red;</span></span>
<span class="line"><span style="color:#24292E;">    content: </span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://192.168.1.110:3000/someapi?params=someInfo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;link btn&quot;</span><span style="color:#24292E;">&gt;点击访问&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,54)]))}const d=n(e,[["render",o]]);export{m as __pageData,d as default};
