import{_ as n,c as a,a2 as e,o as l}from"./chunks/framework.DPuwY6B9.js";const y=JSON.parse('{"title":"可选链与空值合并操作符","description":"","frontmatter":{},"headers":[],"relativePath":"src/skill/可选链与空值合并操作符.md","filePath":"src/skill/可选链与空值合并操作符.md","lastUpdated":1714114110000}'),p={name:"src/skill/可选链与空值合并操作符.md"};function o(c,s,r,t,i,d){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="可选链与空值合并操作符" tabindex="-1">可选链与空值合并操作符 <a class="header-anchor" href="#可选链与空值合并操作符" aria-label="Permalink to &quot;可选链与空值合并操作符&quot;">​</a></h1><h2 id="可选链操作符" tabindex="-1">可选链操作符 <a class="header-anchor" href="#可选链操作符" aria-label="Permalink to &quot;可选链操作符&quot;">​</a></h2><p>可选链<code>?.</code>可以让我们在不确定某个值是否存在时使用，当<code>?.</code>前面的值为 undefined 或 null 时，会立即阻止代码的执行并返回 undefined</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.a) </span><span style="color:#6A737D;">// 此时浏览器会报错</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].age) </span><span style="color:#6A737D;">// 此时浏览器会报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用可选链</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj?.a) </span><span style="color:#6A737D;">// 浏览器打印 undefined</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]?.age) </span><span style="color:#6A737D;">// 浏览器打印 undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可选链也可以用来执行一个可能不存在的函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  admin</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6F42C1;">    alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;I am admin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">user1.</span><span style="color:#6F42C1;">admin</span><span style="color:#24292E;">?.() </span><span style="color:#6A737D;">// I am admin</span></span>
<span class="line"><span style="color:#24292E;">user2.</span><span style="color:#6F42C1;">admin</span><span style="color:#24292E;">?.() </span><span style="color:#6A737D;">// 啥都没有（因为没有方法）但不报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>注意：在可选链前面的变量必须被声明，如果没有声明，将会报错</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person?.name) </span><span style="color:#6A737D;">// 未声明 person 将报错 \`person is not defined\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>person 必须被 let/const/var 声明</p><p>可选链操作符不能用于赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> obj</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">uname: </span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">age: </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">obj?.uname </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;ls&#39;</span><span style="color:#6A737D;"> //控制台 Uncaught SyntaxError: Invalid left-hand side in assignment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可选链在运行时会先检查<code>?.</code>左边的值是否被声明（未声明将报错），再检查是否含有?.右边的值或属性或方法，如果存在则返回该值，不存在则返回 undefined(不存在的方法则不执行)</p><h2 id="空值合并操作符" tabindex="-1">空值合并操作符 <a class="header-anchor" href="#空值合并操作符" aria-label="Permalink to &quot;空值合并操作符&quot;">​</a></h2><p>需求场景：如果获取到的 <code>username</code> 的不为 <code>null</code> 或 <code>undefined</code>，那么该 <code>name</code> 的新值就是 <code>username</code>，如果获取到的是 <code>null</code> 或 <code>undefined</code>，则返回一个默认值，这种情况一般使用三元表达式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &#39;default&#39;</span></span>
<span class="line"><span style="color:#24292E;"># or</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> &#39;default&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是上面的两种写法都存在一定的缺陷，当 <code>username</code> 为 <code>0</code> 或 <code>false</code> 的时候，<code>name</code> 也会返回 <code>default</code></p><p>ES2020 引入了 <code>??</code> 运算符，当<code>??</code>左边为 <code>null</code> 或 <code>undefined</code> 时才返回右边的默认值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> username</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> false</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">??</span><span style="color:#032F62;"> &#39;default&#39;</span><span style="color:#6A737D;"> // name = false;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,20)]))}const b=n(p,[["render",o]]);export{y as __pageData,b as default};
