import{_ as a,c as n,a2 as l,o as e}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"webpack 基础","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/webpack基础.md","filePath":"src/base/webpack基础.md","lastUpdated":1713947656000}'),p={name:"src/base/webpack基础.md"};function o(c,s,r,t,i,d){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="webpack-基础" tabindex="-1">webpack 基础 <a class="header-anchor" href="#webpack-基础" aria-label="Permalink to &quot;webpack 基础&quot;">​</a></h1><p>webpack 是前端工程化的具体解决方案，包括代码压缩混淆、处理 js 的兼容、优化性能</p><p>安装指定版本 <code>npm install webpack@5.42.1 webpack-cli@4.7.2 -D</code></p><p>-S 是--save 的简写，将包安装在开发和线上环境</p><p>-D 是--save-dev 的简写，只安装在开发环境</p><h2 id="webpack-配置" tabindex="-1">webpack 配置 <a class="header-anchor" href="#webpack-配置" aria-label="Permalink to &quot;webpack 配置&quot;">​</a></h2><p>1、创建一个 webpack.config.js 并初始化</p><p><code>module.exports={mode:&#39;development&#39;}</code> mode 值可选 development 和 production，mode 可选值会影响 webpack 压缩文件的大小</p><p>2、在 package.json 的 script 节点下新增脚本</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">：{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack --env.NODE_ENV=common&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;build:prod&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack --env.NODE_ENV=production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#032F62;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可通过 npm run build 运行脚本</p><p>3、会在根目录生成 dist 文件夹，在 webpack4.x 和 5.x 的版本中，webpack 会默认打包 src 的 index.js 且默认输出为 dist 内的 main.js</p><p>4、可以修改默认设置，在 webpack.config.js 的配置文件中，可通过 entry 节点指定打包入口，通过 output 节点指定出口</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> path</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//导入处理文件路径的模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;[name].js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><h3 id="webpack-dev-server" tabindex="-1">webpack-dev-server <a class="header-anchor" href="#webpack-dev-server" aria-label="Permalink to &quot;webpack-dev-server&quot;">​</a></h3><p>类似于 nodemon，会监听修改</p><p>1、使用以下命令安装 <code>npm install webpack-dev-server -D</code></p><p>2、配置 package.json 内的 script <code>&quot;script&quot;：{&quot;dev&quot;：&quot;webpack serve&quot;} </code></p><p>3、运行 <code>npm run dev</code> 且访问 localhost:8080</p><p>4、为生成的项目在内存，所以需要修改引用的文件路径，通过/访问</p><h3 id="html-webpack-plugin" tabindex="-1">html-webpack-plugin <a class="header-anchor" href="#html-webpack-plugin" aria-label="Permalink to &quot;html-webpack-plugin&quot;">​</a></h3><p>将 SRC 内的 html 文件复制到根目录</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> HtmlPlugin</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;html-webpack-plugin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> htmlPlugin</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> HtmlPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  template:</span><span style="color:#032F62;">&#39;./src/index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  filename:</span><span style="color:#032F62;">&#39;./index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode:</span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  plugins:[htmlPlugin],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意：生成的 index 在内存中，而且会自动引入 js 文件</p><h3 id="devserver" tabindex="-1">devServer <a class="header-anchor" href="#devserver" aria-label="Permalink to &quot;devServer&quot;">​</a></h3><p>可实现修改端口号，自动打开及修改主机地址</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">devServer</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  open</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port：</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">，</span></span>
<span class="line"><span style="color:#6F42C1;">  host</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h3><p>webpack 会自动处理 js 文件，对于 css 等其他后缀文件需要借助 loader 处理</p><h3 id="css-loader" tabindex="-1">css-loader <a class="header-anchor" href="#css-loader" aria-label="Permalink to &quot;css-loader&quot;">​</a></h3><p>1、运行 <code>npm i style-loader css-loader -D</code></p><p>2、在 webpack.config.js 的 module 中制定规则</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  rules</span><span style="color:#24292E;">: [{ test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [</span><span style="color:#032F62;">&#39;style-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">] }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>test 表示文件类型，use 表示要调用的 loader，use 中的 loader 顺序是固定的，多个 loader 的调用是从后往前调用</p><h3 id="less-loader" tabindex="-1">less-loader <a class="header-anchor" href="#less-loader" aria-label="Permalink to &quot;less-loader&quot;">​</a></h3><p>1、运行 <code>npm i less-loader less -D</code></p><p>2、在 webpack.config.js 的 module 中制定规则</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  rules</span><span style="color:#24292E;">: [{ test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">less</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [</span><span style="color:#032F62;">&#39;style-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;less-loader&#39;</span><span style="color:#24292E;">] }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="img" tabindex="-1">img <a class="header-anchor" href="#img" aria-label="Permalink to &quot;img&quot;">​</a></h3><p>1、运行 <code>npm i url-loader file-loader -D</code></p><p>2、在 webpack.config.js 的 module 中制定规则</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  rules</span><span style="color:#24292E;">: [{ test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">jpg</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">png</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">gif</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: </span><span style="color:#032F62;">&#39;url-loader?limit=22229&#39;</span><span style="color:#24292E;"> }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>?</code>后是 <code>loader</code> 的参数项，指定图片的大小，单位是字节，只有小于 <code>limit</code> 的图片才会装换为 <code>base64</code> 格式的图片</p><p>使用 base64 格式字符串处理小图片，可以减少请求次数，和精灵图的作用一样，但会略微增大体积</p><p>在配置 img 的 url-loader 时可以设置 output 输出的位置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  rules</span><span style="color:#24292E;">: [{ test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">jpg</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">png</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">gif</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: </span><span style="color:#032F62;">&#39;url-loader?limit=22229&amp;outputPath=images&#39;</span><span style="color:#24292E;"> }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="js-高级语法" tabindex="-1">JS 高级语法 <a class="header-anchor" href="#js-高级语法" aria-label="Permalink to &quot;JS 高级语法&quot;">​</a></h3><p>如果 js 的语法太高级 webpack 无法处理，需要借助 <code>babel-loader</code> 进行处理</p><p>1、运行 <code>npm i babel-loader @babel/core @babel/plugin-proposal-decorators -D</code></p><p>2、在 webpack.config.js 的 module 中制定规则</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  rules</span><span style="color:#24292E;">: [{ test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">, exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;"> }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>exclude 是排除文件,需要排除第三方包</p><p>3、在项目根目录中创建 babel.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">modules.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [[</span><span style="color:#032F62;">&#39;@babel/plugin-proposal-decorators&#39;</span><span style="color:#24292E;">, { legacy: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }]]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可参考 babel 官网配置</p><p><strong>注意</strong></p><p>在 webpack 中可以使用 es6 中的语法 import 导入模块，一切皆模块，可以使用 import xxx from &#39;xxx&#39; 接收</p><h2 id="打包发布" tabindex="-1">打包发布 <a class="header-anchor" href="#打包发布" aria-label="Permalink to &quot;打包发布&quot;">​</a></h2><p>在 package.json 下新增 build 命令，将内存的文件放在物理磁盘中</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">：{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;build&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;webpack --mode production&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>--mode</code> 会覆盖 webpack.config.js 内的 mode 值，改为上线环境，运行 <code>npm run build</code></p><p>在 webpack.config.js 的 output 节点中可设置每个文件生成的位置的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">output</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  path</span><span style="color:#24292E;">: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6F42C1;">  filename</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;js/bundle.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>清理 dist 旧文件</p><p>1、<code>npm install --save-dev clean-webpack-plugin</code></p><p>2、在 webpack.config.js 里面配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">CleanWebpackPlugin</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;clean-webpack-plugin&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> webpackConfig</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> CleanWebpackPlugin</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> webpackConfig;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>const 左侧的花括号是解构赋值</p><h2 id="source-map" tabindex="-1">Source Map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;Source Map&quot;">​</a></h2><p>Source Map 是文件位置信息，在开发环境下记录的错误位置是在内存的位置而不是真实的位置，需要在 webpack.config.js 中的 module.exports 增加代码： <code>devtool:&#39;eval-source-map&#39;</code></p><p>如果在生产环境下，需要关闭 source map 保证安全性，如果想定位行数且不暴露源码，改成 <code>devtool:&#39;nosources-source-map&#39;</code></p><p>实际开发中使用命令行工具（cli）自动生成 webpack</p><p>导入包的时候建议使用@表示 src 源代码目录，需要先在 webpack.config.js 配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  alias</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">    &#39;@&#39;</span><span style="color:#24292E;">:path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./src/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,75)]))}const y=a(p,[["render",o]]);export{u as __pageData,y as default};
