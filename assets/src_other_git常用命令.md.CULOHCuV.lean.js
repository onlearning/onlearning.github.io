import{_ as e,c as s,a2 as n,o as t}from"./chunks/framework.DPuwY6B9.js";const h=JSON.parse('{"title":"git 常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"src/other/git常用命令.md","filePath":"src/other/git常用命令.md","lastUpdated":1714114110000}'),l={name:"src/other/git常用命令.md"};function o(p,a,c,i,r,d){return t(),s("div",null,a[0]||(a[0]=[n(`<h1 id="git-常用命令" tabindex="-1">git 常用命令 <a class="header-anchor" href="#git-常用命令" aria-label="Permalink to &quot;git 常用命令&quot;">​</a></h1><h2 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h2><p>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></p><p>配置提交人邮箱：<code>git config --global user.email 提交人邮箱</code></p><p>查看 git 配置信息：<code>git config --list</code></p><h2 id="提交及拉取" tabindex="-1">提交及拉取 <a class="header-anchor" href="#提交及拉取" aria-label="Permalink to &quot;提交及拉取&quot;">​</a></h2><p>提交：<code>git push</code></p><p>拉取：<code>git pull</code></p><p>强行覆盖远程分支提交：<code>git push -f</code></p><p>变基拉取：<code>git pull --rebase</code></p><h3 id="将修改记录提交到上一次-commit" tabindex="-1">将修改记录提交到上一次 commit <a class="header-anchor" href="#将修改记录提交到上一次-commit" aria-label="Permalink to &quot;将修改记录提交到上一次 commit&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">git add .</span></span>
<span class="line"><span style="color:#24292E;">git commit </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">amend</span></span>
<span class="line"><span style="color:#6A737D;">// 如果需要修改 commit 的备注 在 git commit --amend</span></span>
<span class="line"><span style="color:#6A737D;">// 出现有注释的界面（你的注释应该显示在第一行）</span></span>
<span class="line"><span style="color:#6A737D;">// 输入 i 进入修改模式，修改好注释后，按 Esc 键 退出编辑模式</span></span>
<span class="line"><span style="color:#24292E;">:q </span><span style="color:#6A737D;">// 保存并退出</span></span>
<span class="line"><span style="color:#24292E;"># or</span></span>
<span class="line"><span style="color:#24292E;">:wq </span><span style="color:#6A737D;">// 保存并退出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h2><p>删除分支 <code>git branch -d &lt;branch_name&gt;</code></p><p>如果想要删除多个分支，可以将它们的名称用空格分隔 <code>git branch -d &lt;branch_name1&gt; &lt;branch_name2&gt; ...</code></p><p>注意，使用 -d 选项时，如果尝试删除当前所在的分支，Git 会拒绝删除并显示错误消息。如果你确定要删除当前分支，请使用 -D 选项来强制删除。</p><p>同时删除本地和远程分支 <code>git push &lt;remote_name&gt; --delete &lt;branch_name&gt;</code></p><p>已经删除的远程分支，本地仓库仍然会保留对这些远程分支的引用 使用 <code>git remote prune origin</code> 清理</p>`,18)]))}const b=e(l,[["render",o]]);export{h as __pageData,b as default};
