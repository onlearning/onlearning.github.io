import{_ as a,c as n,a2 as e,o}from"./chunks/framework.DPuwY6B9.js";const b=JSON.parse('{"title":"Vue&React 对比","description":"","frontmatter":{},"headers":[],"relativePath":"src/other/vue&react对比.md","filePath":"src/other/vue&react对比.md","lastUpdated":null}'),p={name:"src/other/vue&react对比.md"};function l(c,s,r,t,d,i){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="vue-react-对比" tabindex="-1">Vue&amp;React 对比 <a class="header-anchor" href="#vue-react-对比" aria-label="Permalink to &quot;Vue&amp;React 对比&quot;">​</a></h1><h2 id="vue-和-react-对比" tabindex="-1">Vue 和 React 对比 <a class="header-anchor" href="#vue-和-react-对比" aria-label="Permalink to &quot;Vue 和 React 对比&quot;">​</a></h2><h3 id="react-渲染" tabindex="-1">React 渲染 <a class="header-anchor" href="#react-渲染" aria-label="Permalink to &quot;React 渲染&quot;">​</a></h3><p><code>React</code> 官网为 18.3.0 <code>React19</code> 还是 <code>beta</code>(测试)版本</p><p><code>React 16.8</code> 之后将渲染的架构升级为 <code>fiber</code>, 此前是的渲染逻辑为当前有新的 <code>update</code> 时，<code>react</code> 会递归所有的 <code>vdom</code> 节点，如果 <code>dom</code> 节点过多，会导致其他事件影响滞后，造成卡顿，一旦递归开始无法停止。</p><p><code>React</code> 为了不阻塞页面的渲染，采用了 <code>Fiber</code> 架构，<code>Fiber</code>也是一种链表的数据结构，基于这个数据结构可以实现由原来不可中断的更新过程变成异步的可中断的更新。但是由于没有设置反向指针，因此没有使用双端比对的方式去优化 <code>Diff</code> 算法（没有反向指针，从右往左遍历链表会很困难）。这一点在 React 源码 reconcileChildrenArray 函数的注释中也有说明。</p><p><code>return</code> ，指向该 <code>FiberNode</code> 的父节点</p><p><code>child</code> ，指向该 <code>FiberNode</code> 的第一个子节点</p><p><code>sibling</code> ，指向右边第一个兄弟 <code>Fiber</code> 节点</p><h3 id="diff-算法的区别" tabindex="-1">diff 算法的区别 <a class="header-anchor" href="#diff-算法的区别" aria-label="Permalink to &quot;diff 算法的区别&quot;">​</a></h3><p><code>Vue2</code> 的 <code>Diff</code> 与 <code>React</code> 的 <code>Diff</code> 主要区别为：</p><p><code>Vue2</code> 采用<strong>双端比对</strong>的方式优化了 <code>Diff</code> 算法，而 <code>React</code> 由于是 <code>Fiber</code> 架构，是<strong>单链表</strong>，没有使用双端比对的方式优化</p><p><code>Vue2</code> 在 <code>Diff</code> 的时候与 <code>React</code> 在 <code>Diff</code> 的时候都采用了 <code>map</code> 来加快查找的效率，但是 <code>Vue2</code> 构造的 <code>Diff</code> 是 <code>key</code> -&gt; <code>index</code> 的映射，而 <code>React</code> 构造的 <code>Diff</code> 是 <code>key</code> -&gt; <code>Fiber</code> 节点 的映射</p><p><code>Vue3</code> 除了双端对比之外还构造了<strong>最长递增子序列</strong>，最大程度降低了 DOM 操作，而 <code>React</code> 没有使用最长递增子序列来加速 <code>Diff</code> 算法</p><p>所以从虚拟 <code>dom</code> 的更新性能来看 <code>vue</code> 是强于 <code>react</code> 的</p><h3 id="语法的区别" tabindex="-1">语法的区别 <a class="header-anchor" href="#语法的区别" aria-label="Permalink to &quot;语法的区别&quot;">​</a></h3><p><code>vue</code> 的模板语法将<code> HTML、JS 、CSS</code> 区分开，有自己独特的指令</p><p><code>react</code> 使用 <code>jsx</code> 语法糖书写，允许在 <code>js</code> 内书写 <code>html</code>，如果要实现条件表达需要时需要使用三元表达式或 <code>map</code> 的方法实现循环渲染</p><p><code>React</code> 有一个更大、更成熟的生态系统，路由和状态管理都是社区提供，而 <code>Vue</code> 提供了一个更加一体化的开发体验，包括路由管理、状态管理等，都是官方提供的。</p><h3 id="项目选型怎么考虑-怎么选择" tabindex="-1">项目选型怎么考虑？怎么选择？ <a class="header-anchor" href="#项目选型怎么考虑-怎么选择" aria-label="Permalink to &quot;项目选型怎么考虑？怎么选择？&quot;">​</a></h3><p>从加载速度，运行时性能来说，我觉得这两个框架综合各种场景应该是没什么质的差别的。硬要说的话，<code>Vue</code> 在更新时性能优化方面需要的心智负担可能会少那么一点，特别是 <code>Vue3</code>，而 <code>React</code> 如果不注意，容易导致一些组件无用的 <code>Diff</code>，但其实实际项目中真正能遇到这种性能瓶颈的也是极少数，所以(这里有两种说法)：</p><h4 id="选择-vue" tabindex="-1">选择 Vue <a class="header-anchor" href="#选择-vue" aria-label="Permalink to &quot;选择 Vue&quot;">​</a></h4><p>所以总的来说我觉得 <code>Vue</code> 性能上会更有优势一点，特别是 <code>Vue3</code> 更加灵活，有很好的可扩展性，同时有更快的渲染速度和更小的打包体积。从 <code>mixins</code> 到 <code>HOC</code> 到 <code>render props</code> 再到 <code>hooks</code>，<code>React</code> 基本已经废掉了过去很多基于组件的逻辑抽象模式，抹掉了 <code>JSX</code> 对比模板的一个优势，<code>Vue3</code> 中现在也都能做到，所以我会偏向 <code>Vue3</code>。</p><h4 id="选择-react" tabindex="-1">选择 React <a class="header-anchor" href="#选择-react" aria-label="Permalink to &quot;选择 React&quot;">​</a></h4><p>所以总的来说我觉得要是一些不大的系统或者 <code>H5</code> 就用 <code>Vue</code>，因为不管是上手还是开发难度上都很简单，开发效率也高嘛，而且它有更小的打包体积，毕竟在移动端网络差异大的情况下，资源体积是非常重要的。但像是一些中后台系统，或者一些大点的项目，会越做越大的，多人协作开发的，就用 <code>React</code>，因为它的函数式编程有更加灵活的结构和可扩展性，丰富的生态圈和工具链，解决方案多，后期也更方便迭代与维护，还适用原生 <code>APP</code>，所以我会偏向 <code>React</code>。</p><h2 id="react-类组件与函数式组件" tabindex="-1">react 类组件与函数式组件 <a class="header-anchor" href="#react-类组件与函数式组件" aria-label="Permalink to &quot;react 类组件与函数式组件&quot;">​</a></h2><h3 id="使用类组件的场景" tabindex="-1">使用类组件的场景 <a class="header-anchor" href="#使用类组件的场景" aria-label="Permalink to &quot;使用类组件的场景&quot;">​</a></h3><p>1、需要错误边界时</p><p>类组件可以捕获错误并优雅地处理，这在一些关键组件（如数据展示、异步加载组件）中很重要。当前只有类组件可以直接实现错误边界，因此在需要组件级错误捕获时，可以使用类组件。</p><p>2、复杂的生命周期管理</p><p>对于需要频繁使用多个生命周期方法来精细控制的复杂组件，类组件的显式生命周期方法（如 <code>componentDidMount</code>、<code>componentDidUpdate</code>）有时比 <code>useEffect</code> 更清晰。例如，复杂的动画、跨组件通信等场景。</p><p>3、项目中已有大量类组件</p><p>在老项目或已有的类组件代码库中，使用类组件可以保持代码一致性，避免在不同风格组件之间来回切换。否则，重构为函数组件可能会增加维护成本。</p><p>4、需要与其他类组件库兼容</p><p>某些第三方库或老旧组件可能要求使用类组件，这种情况下可以使用类组件来保证兼容性。</p><h3 id="使用函数组件的场景" tabindex="-1">使用函数组件的场景 <a class="header-anchor" href="#使用函数组件的场景" aria-label="Permalink to &quot;使用函数组件的场景&quot;">​</a></h3><p>1、大部分新项目和组件开发</p><p>函数组件更简洁，并且 <code>Hook</code> 提供了丰富的状态和副作用管理方式，是 <code>React</code> 官方推荐的现代开发方式，适合新项目的开发。</p><p>2、需要 <code>Hook</code> 的灵活性</p><p>函数组件支持 <code>Hook</code>（如 <code>useState</code>、<code>useEffect</code>、<code>useContext</code> 等），可以在组件中灵活添加状态、上下文、缓存等。特别是对于需要管理复杂状态或副作用的组件，<code>Hook</code> 可以将逻辑模块化、复用性更强。</p><p>3、逻辑复用</p><p>通过自定义 <code>Hook</code>，函数组件可以将状态和副作用逻辑封装成独立模块，更加方便地复用。自定义 <code>Hook</code> 可以抽离和共享逻辑，例如封装 API 请求、表单管理、缓存等逻辑，非常适合复杂项目。</p><p>4、性能优化</p><p>函数组件通过 <code>React.memo</code>、<code>useCallback</code> 和 <code>useMemo</code> 进行性能优化，比类组件使用 <code>shouldComponentUpdate</code> 或 <code>PureComponent</code> 更灵活，优化效果也更好。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>新开发和现代化项目：函数组件通常是首选，具有更简洁的语法、灵活的状态管理和强大的复用能力。</p><p>复杂生命周期控制、错误边界需求：类组件可能更适合，用于处理复杂生命周期和错误边界等需求。</p><h2 id="自定义-hooks" tabindex="-1">自定义 hooks <a class="header-anchor" href="#自定义-hooks" aria-label="Permalink to &quot;自定义 hooks&quot;">​</a></h2><h3 id="一个简单的新增-1-的自定义-hook" tabindex="-1">一个简单的新增+1 的自定义 hook <a class="header-anchor" href="#一个简单的新增-1-的自定义-hook" aria-label="Permalink to &quot;一个简单的新增+1 的自定义 hook&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useState, useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> useCustomHook</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setCount</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#6F42C1;"> increment</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setCount</span><span style="color:#24292E;">(</span><span style="color:#E36209;">prevCount</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> prevCount </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> [count, increment]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在组件内使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> useCustomHook </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./useCustomHook&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> App</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">increment</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useCustomHook</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Count: {count}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#6F42C1;"> onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{increment}&gt;+1&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> App</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="一个收发消息的-hook" tabindex="-1">一个收发消息的 hook <a class="header-anchor" href="#一个收发消息的-hook" aria-label="Permalink to &quot;一个收发消息的 hook&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useState, useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义通信Hooks</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> useCommunication</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">message</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setMessage</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 发送消息的函数</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#6F42C1;"> sendMessage</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> msg</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setMessage</span><span style="color:#24292E;">(msg)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> { message, sendMessage }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接收消息的组件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> MessageReceiver</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useCommunication</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{message}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 发送消息的组件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> MessageSender</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">sendMessage</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> useCommunication</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">  useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 模拟发送消息的动作</span></span>
<span class="line"><span style="color:#6F42C1;">    sendMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, MessageReceiver!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }, [sendMessage])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;发送消息&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="高阶组件-hoc" tabindex="-1">高阶组件 HOC <a class="header-anchor" href="#高阶组件-hoc" aria-label="Permalink to &quot;高阶组件 HOC&quot;">​</a></h2><p>React 高阶组件(HOC)，对于很多 react 开发者来说并不陌生，它是灵活使用 react 组件的一种技巧，高阶组件本身不是组件，它是一个参数为组件，返回值也是一个组件的函数。</p><p>高阶作用用于强化组件，复用逻辑，提升渲染性能等作用。</p>`,57)]))}const y=a(p,[["render",l]]);export{b as __pageData,y as default};
