import{_ as a,c as n,a2 as p,o as e}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"H5 新特性与 ES6","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/H5新特性与ES6.md","filePath":"src/base/H5新特性与ES6.md","lastUpdated":1713863841000}'),l={name:"src/base/H5新特性与ES6.md"};function o(r,s,c,t,i,d){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="h5-新特性与-es6" tabindex="-1">H5 新特性与 ES6 <a class="header-anchor" href="#h5-新特性与-es6" aria-label="Permalink to &quot;H5 新特性与 ES6&quot;">​</a></h1><p>新特性有兼容性问题，需要 i9 以上和移动端才能兼容</p><h2 id="h5-新标签" tabindex="-1">H5 新标签 <a class="header-anchor" href="#h5-新标签" aria-label="Permalink to &quot;H5 新标签&quot;">​</a></h2><h3 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h3><p>head 头部标签</p><p>nav 导航标签</p><p>article 内容标签</p><p>section 定义文档大的区域，相当于大的 div</p><p>aside 侧边栏标签</p><p>footer 底部标签</p><p>有利于 SEO</p><p>可以多次使用</p><p>注： 在 IE9 中使用需要转换为块级元素</p><h3 id="多媒体标签" tabindex="-1">多媒体标签 <a class="header-anchor" href="#多媒体标签" aria-label="Permalink to &quot;多媒体标签&quot;">​</a></h3><p>音频标签 audio（尽量使用 mp3 格式）</p><p>视频标签 video（尽量使用 mp4 格式）</p><h3 id="表单" tabindex="-1">表单 <a class="header-anchor" href="#表单" aria-label="Permalink to &quot;表单&quot;">​</a></h3><p>新增 input 表单 可限制用户输入的数据类型</p><p>required 设置为必填项</p><p>placeholder 提示文本</p><p>autofouces 自动聚焦</p><p>autocomplete 记录历史输入文字 默认为打开，关闭可保证安全性</p><p>multiple 多文件提交</p><h2 id="css3-新特性" tabindex="-1">CSS3 新特性 <a class="header-anchor" href="#css3-新特性" aria-label="Permalink to &quot;CSS3 新特性&quot;">​</a></h2><p>同样有兼容性问题，适用于 IE9 及移动端</p><h3 id="属性选择器" tabindex="-1">属性选择器 <a class="header-anchor" href="#属性选择器" aria-label="Permalink to &quot;属性选择器&quot;">​</a></h3><p>属性选择器（可不借助类和 id 选择器选择元素）选中含有指定属性的元素</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;111&quot;</span><span style="color:#24292E;">&gt;111&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">[title] {</span></span>
<span class="line"><span style="color:#6F42C1;">  color</span><span style="color:#24292E;">: red;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>属性选择器可选择属性等于某个值的元素，一个为 text，一个为 password 选中 text <code>input[type=text]</code></p><p>属性选择器可以同样类名开头的元素，比如四个为 i1、i2、i3、i4 开头的 div 可以使用 <code>div[class^=i]</code>选中以 i 开头的 div</p><p>属性选择器可选择以同样名称结尾的元素，和上面同理，写法 <code>div[class$=i]</code></p><p>属性选择器可选择包含某个值的，比如类包含 icon，原理同上，写法 <code>div[class*=icon]</code></p><p>属性选择器权重为 10 和类选择器 伪类选择器权重相同</p><h3 id="结构伪类选择器" tabindex="-1">结构伪类选择器 <a class="header-anchor" href="#结构伪类选择器" aria-label="Permalink to &quot;结构伪类选择器&quot;">​</a></h3><p>选择 ul 的第一个 li 写法 <code>ul li:first-child</code></p><p>选择最后一个写法 <code>ul li:last-child</code></p><p>选择第 n 个写法 <code>ul li:nth-child(n)</code>(n 代表第几，还可以是 even 奇数或 odd 偶数，如果是公式 n，会选择所有的 li)</p><h3 id="伪元素选择器" tabindex="-1">伪元素选择器 <a class="header-anchor" href="#伪元素选择器" aria-label="Permalink to &quot;伪元素选择器&quot;">​</a></h3><p>可以用 CSS 新建标签元素</p><p><code>::before</code> 在元素前插入内容</p><p><code>::after</code> 在元素后插入内容</p><p>伪元素属于行内标签 必须有 content 属性，和标签选择器一样，权重为 1</p><p>可以用于字体图标和清除浮动</p><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><p>es6 是 2015 年后发布的 ESMAScript 的版本</p><h3 id="let" tabindex="-1">let <a class="header-anchor" href="#let" aria-label="Permalink to &quot;let&quot;">​</a></h3><p>声明的变量只在块级中有效即一个大括号内</p><p>let 防止循环变量变成全局变量</p><p>let 不存在变量提升</p><p>let 会存在暂时性死区，在 let 区内的变量不受全局变量影响</p><h3 id="var" tabindex="-1">var <a class="header-anchor" href="#var" aria-label="Permalink to &quot;var&quot;">​</a></h3><p>var 关键字不具备块级作用域，且会提升变量</p><h3 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h3><p>const 关键字声明的常量具有块级作用域</p><p>const 关键字声明的关键字必须赋值</p><p>const 声明的关键字赋值后不能修改（实际是地址不能更改），复杂数据类型（数组）内部数值可以改，但数据本身依旧不可改</p><h3 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h3><p>可以从数组或对象中提取值，将值赋值给另外的变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [a, b, d] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ary</span></span>
<span class="line"><span style="color:#6A737D;">// a:1 b:2 d:3</span></span>
<span class="line"><span style="color:#6A737D;">// 就可以从 ary 中拿到对应的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><p>()=&gt;{函数体},函数体只有一句话可以省略大括号</p><p><code>const sum=(num1,mun2)=&gt;num1+num2</code></p><p>如果形参只有一个，小括号也可以省略</p><p><code>const fn = v =&gt;{函数体}</code></p><p>箭头函数的 this 指向箭头函数定义位置中的 this</p><p>箭头函数在对象内部的 this 指向 window，因为对象不能产生作用域</p><h3 id="剩余参数" tabindex="-1">剩余参数 <a class="header-anchor" href="#剩余参数" aria-label="Permalink to &quot;剩余参数&quot;">​</a></h3><p>在函数中的参数不确定可以用<code>...args</code>接收所有参数</p><p><code>const sum = (...args)=&gt;{}</code></p><p>args 为一个数组</p><h3 id="array-扩展方法" tabindex="-1">Array 扩展方法 <a class="header-anchor" href="#array-扩展方法" aria-label="Permalink to &quot;Array 扩展方法&quot;">​</a></h3><p>合并数组 <code>ary=[...ary1,..ary2]</code>或<code>ary1.push(...ary2)</code></p><p>将伪数组转换为数组 <code>ary=[...ary1]</code>,就可以使用 push 方法</p><p>转换为真数组还可以使用 <code>Array.from</code> 方法</p><p><code>Array.find()</code>可以返回第一个符合条件的成员</p><p><code>Array.findIndex()</code>可以返回第一个符合条件的索引</p><p><code>Array.includes()</code>判断是否包含给定的值，返回布尔值</p><h3 id="字符串扩展方法" tabindex="-1">字符串扩展方法 <a class="header-anchor" href="#字符串扩展方法" aria-label="Permalink to &quot;字符串扩展方法&quot;">​</a></h3><p>使用反引号定义模板字符串</p><p>在模板字符串中使用变量只需要<code>\${变量名}</code></p><p>模板字符串可以换行，可以调用函数</p><p><code>starsWith()</code>，字符串是否以某个字符串开头</p><p><code>endsWith()</code>，字符串是否以某字符串结尾</p><p><code>repeat(次数)</code>，重复某字符串 y 次</p><h3 id="set-数据结构" tabindex="-1">SET 数据结构 <a class="header-anchor" href="#set-数据结构" aria-label="Permalink to &quot;SET 数据结构&quot;">​</a></h3><p>类似于数组，不会存储重复的值，常用于搜索历史关键字的存储</p><p>本身为一个构造函数</p><p><code>const s = new Set()</code></p><p>可以利用 set 创建数组进行去重</p><p><code>var arr = [...s]</code></p><p><code>add(value)</code> 向 set 中添加值，返回原 set</p><p><code>delete(value)</code> 返回一个布尔值，true 为成功</p><p><code>has(value)</code> 是否含有某成员，返回布尔值</p><p><code>clear()</code> 清除 set 所有成员</p><p>拥有 <code>forEach</code> 方法，可以遍历所有成员</p><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><p>类的本质还是一个函数，可以理解为构造函数的另一种写法，同样可以通过 prototype 添加方法，类就是一个语法糖，更加便捷</p><p>类的声明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Add</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  ​</span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;"> （参数）{</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6F42C1;">  say</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>类的调用，通过 new 关键字实例化 <code>new Add()</code></p><p>类的内部有一个默认的构造函数 <code>constructor</code>，可以接收传递过来的参数</p><p>类内部的方法不用 <code>function</code> 声明，函数之间不需要逗号隔开</p><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><p>通过 <code>extends</code> 关键字继承父类</p><p>通过 <code>super</code> 关键字可以调用父类的方法，在继承中如果子类和父类有相同的方法，会先执行子类的方法，遵循就近原则</p><p><code>super</code> 方法必须放在子类的 this 前面</p><p>类没有变量提升，需要先有类再实例化对象</p><p>再类里面公用的属性和方法需要加 <code>this</code> 调用</p><p><code>constructor</code> 的 <code>this</code> 指向实例对象</p><p>方法内的 <code>this</code> 指向的是调用的对象</p><p>如果在 <code>constructor</code> 内部有调用方法需要指向实例对象，则可以先在 <code>constructor</code> 内部将 <code>this</code> 传递给一个全局变量，然后在方法内进行调用</p><p>通过 <code>appendElement</code> 添加子元素要先创建一个元素</p><p>但是 <code>insertAdjacentHtml(位置，元素)</code>则可以直接添加元素，元素可以是字符串，比如<code>&lt;li&gt;123&lt;/li&gt;</code></p><p>动态添加的模块可以封装起来，初始化的时候让他获取所有的模块，然后更新的时候调用，这样就可以动态加载</p><p><code>click()</code>会自动触发点击事件，但如果出使用 click 事件会出现下标越界，可以使用&amp;&amp;并集短路原理，只有前一个为真才执行</p><p>双击事件：<code>ondblclick</code></p><p>但是双击文字会默认选中文字，所以需要双击文字禁止选中文字</p><p>文字处于选中状态，<code>select()</code></p><h3 id="es6-模块化" tabindex="-1">ES6 模块化 <a class="header-anchor" href="#es6-模块化" aria-label="Permalink to &quot;ES6 模块化&quot;">​</a></h3><p>ES6 模块化规范是浏览器端和服务器端通用的模块化开发规范</p><p>每一个 js 文件都是独立的模块</p><p>导入其他模块使用 import</p><p>向外共享模块成员使用 export</p><h4 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h4><p>1、默认导出</p><p>export default 默认导出成员</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 01.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n1 </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 10</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  n1,</span></span>
<span class="line"><span style="color:#24292E;">  show</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>注意：默认导出在一个模块中只允许使用一次</strong></p><p>默认导入 import 接收名称 from &#39;模块&#39;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> m1 </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./01.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(m1) </span><span style="color:#6A737D;">//{n1:10,show()}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2、按需导出</p><p>export 按需导入的成员</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 03.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;aaa&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> show</span><span style="color:#24292E;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>按需导入 import {s1} from &#39;模块路径&#39;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { s1 } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;./03.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s1) </span><span style="color:#6A737D;">//aaa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意：按需导出的名称和导入的名称需要一致</p><p>可以使用 as 关键字进行重命名</p><p><code>import {s1 as str1} from &#39;./03.js&#39;</code></p><p>3、直接导入</p><p>可以直接执行某个模块中的代码</p><p>在一个模块中执行一个 for 循环</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 05.js</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在另一个文件直接 import 导入即可</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#032F62;"> &#39;./05.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="回调地狱" tabindex="-1">回调地狱 <a class="header-anchor" href="#回调地狱" aria-label="Permalink to &quot;回调地狱&quot;">​</a></h3><p>多层回调函数相互嵌套 代码可读性很差且难以维护</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}, </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ES6 通过 Promise 解决回调地狱</p><p>Promise 是一个构造函数，通过构建 Promise 的实例对象代表一次异步操作</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> p</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">p.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#E36209;">  result</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#E36209;">  error</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过.then 方法来指定成功或失败的回调函数</p><p>因为 promise 函数是异步操作，无法保证函数的执行顺序，可以通过在 promise 函数中 return 一个 promise 方法，使用链式的方法继续调用.then 方法保证执行顺序</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">thenFs</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">r1</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> thenFs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在链式中声明一个 catch 方法捕获错误</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">thenFs</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">r1</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> thenFs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>注意</strong></p><p>catch 方法在碰到错误后会阻止后续.then 方法的执行，比如上述第一个文件读取失败，那么两个 then 方法都不会调用，解决方法是将.catch 方法放到前面去</p><p><code>promise.all()</code>会等所有异步操作执行完毕获取所有的结果才执行成功的回调函数</p><p><code>promise.race()</code>方法只要任何一个异步操作执行完毕就立即执行成功的回调函数(类似赛跑)</p><p>封装异步读取文件的方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;fs&#39;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getFile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fPath</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#6A737D;">//返回一个 Proimse 构造函数，resolve 代表成功，reject 代表失败</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#D73A49;"> new</span><span style="color:#005CC5;"> Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">,</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#6A737D;">  //将参数传入并使用回调函数接收结果</span></span>
<span class="line"><span style="color:#24292E;">  fs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(fPath,</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">,</span><span style="color:#E36209;">data</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">return</span><span style="color:#6F42C1;"> reject</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#6F42C1;">      resolve</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="async-await" tabindex="-1">async/await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;async/await&quot;">​</a></h4><p>使用 async 和 await 简化 promise.then 的异步操作</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> thenFs </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;then-fs&#39;</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> getAllFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> a1</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> await</span><span style="color:#24292E;"> thenFs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">  //此时 a1 指向的不是 promise 对象，而是.then 方法返回的结果</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：async 和 await 必须成对出现</p><h2 id="es5" tabindex="-1">ES5 <a class="header-anchor" href="#es5" aria-label="Permalink to &quot;ES5&quot;">​</a></h2><h3 id="构造函数和原型" tabindex="-1">构造函数和原型 <a class="header-anchor" href="#构造函数和原型" aria-label="Permalink to &quot;构造函数和原型&quot;">​</a></h3><p>在 es5 中使用够着函数来创建对象，在 es6 中用类来封装</p><p>构造函数包括实例成员和静态成员</p><p>实例成员通过 <code>this</code> 添加</p><p>静态成员通过构造函数声明，并只能通过构造函数访问</p><p>构造函数会浪费内存，因为构造函数内的方法会在生成对象时给方法开辟独立的内存，这样无论有多少方法，就会开辟多少内存，解决的方法：使用原型对象 <code>prototype</code>，可以将共享的方法放在 <code>prototype</code> 内部</p><p>原型就是一个对象，通过构造函数直接声明</p><p>对象会有一个<code>--proto--</code>方法，指向 <code>prototype</code>，所以对象可以拿到，这就是实例化对象的时候可以直接使用对象 Obj 的方法的原因</p><p>对象原型<code>--proto--</code>和原型对象 <code>prototype</code> 都有 <code>constructor</code> 属性，它是一个构造函数，返回的创建出来的构造函数</p><p>如果将原型对象 <code>prototype</code> 用对象的方法封装一些方法，会导致指向错误，可以通过 <code>constructor</code> 重新指向回去</p><p>原型链：每一个原型对象都有<code>--proto--</code>，如果本省没有则返回构造函数上找，如果构造函数上没有则返回 object 对象上找，如果 object 对象上没有则返回 null，js 的成员查找方式按照原型链来查找</p><p>构造函数内的 <code>this</code> 指向实例对象</p><p>原型对象内的 <code>this</code> 指向调用的对象</p><p>通过原型对象可以扩展内置对象使用方法，eg：<code>Array.prototype.函数名=function(){}</code></p><p>所以在数组和字符串内部不能将原型对象使用对象的方法创建函数，会覆盖原来的方法</p><h3 id="构造函数的继承" tabindex="-1">构造函数的继承 <a class="header-anchor" href="#构造函数的继承" aria-label="Permalink to &quot;构造函数的继承&quot;">​</a></h3><p><code>call()</code>；可以调用函数，还可以改变函数的 this 指向</p><p>eg：<code>函数名.call(对象名)</code></p><p>在子构造函数中调用父元素的属性，<code>父构造函数.call(this,父元素 1,父元素 2)</code></p><p>子构造函数内会有原型对象 <code>prototype</code>，如果需要访问父构造函数的原型对象可以通过实例化父构造函数访问即 <code>newFather()</code>；但此方法会导致指向问题，还要通过 <code>constructor</code> 指回子构造函数</p><h3 id="es5-新增方法" tabindex="-1">ES5 新增方法 <a class="header-anchor" href="#es5-新增方法" aria-label="Permalink to &quot;ES5 新增方法&quot;">​</a></h3><h4 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h4><p><code>forEach()</code>；遍历数组 返回原数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">，</span><span style="color:#E36209;">inex</span><span style="color:#24292E;">，</span><span style="color:#E36209;">array</span><span style="color:#24292E;">){})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>filter()</code>；筛选数组 返回一个新数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">，</span><span style="color:#E36209;">inex</span><span style="color:#24292E;">，</span><span style="color:#E36209;">array</span><span style="color:#24292E;">){})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>some()</code>；查找数组中是否有满足条件的元素 返回一个布尔值，找到就停止循环</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">eg：arr.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">，</span><span style="color:#E36209;">inex</span><span style="color:#24292E;">，</span><span style="color:#E36209;">array</span><span style="color:#24292E;">){})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h4><p>删除字符串两端的空白字符 <code>字符串.trim()</code>；返回一个新的字符串</p><h4 id="对象方法" tabindex="-1">对象方法 <a class="header-anchor" href="#对象方法" aria-label="Permalink to &quot;对象方法&quot;">​</a></h4><p><code>Object.defineProperty()</code>修改对象中的属性 对象劫持</p><p><code>Object.defineProperty(对象名,属性,{value：值})</code></p><p>中括号内部有四个键值对，用逗号隔开</p><p>value：属性的值，默认为 underfine</p><p>weitable：是否可以重写（即重新修改），默认为 false</p><p>enumerable：是否可以被枚举（遍历），默认为 false</p><p>configurable：是否可以被删除或再次修改特性，默认为 false</p><p><code>object.keys()</code>可以遍历对象</p><h2 id="函数进阶" tabindex="-1">函数进阶 <a class="header-anchor" href="#函数进阶" aria-label="Permalink to &quot;函数进阶&quot;">​</a></h2><h3 id="定义函数" tabindex="-1">定义函数 <a class="header-anchor" href="#定义函数" aria-label="Permalink to &quot;定义函数&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fn</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> fun</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Function（</span><span style="color:#032F62;">&#39;参数 1&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;参数 2&#39;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.,</span><span style="color:#032F62;">&#39;函数体&#39;</span><span style="color:#24292E;">）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数都是 Function 的实例，函数也属于对象</p><h4 id="普通函数" tabindex="-1">普通函数 <a class="header-anchor" href="#普通函数" aria-label="Permalink to &quot;普通函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="对象函数" tabindex="-1">对象函数 <a class="header-anchor" href="#对象函数" aria-label="Permalink to &quot;对象函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">​ say：</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">o.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> Star</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Star</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="绑定事件函数" tabindex="-1">绑定事件函数 <a class="header-anchor" href="#绑定事件函数" aria-label="Permalink to &quot;绑定事件函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">btn.</span><span style="color:#6F42C1;">click</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="定时器函数" tabindex="-1">定时器函数 <a class="header-anchor" href="#定时器函数" aria-label="Permalink to &quot;定时器函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">serInterval（</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}，</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}，</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//延时执行，用来节流，比如有一个输入框，用 oninput 监听一直在输入会一直调用，可以延时进行调用，this 指向 window</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="立即执行函数" tabindex="-1">立即执行函数 <a class="header-anchor" href="#立即执行函数" aria-label="Permalink to &quot;立即执行函数&quot;">​</a></h4><p><code>(function(){})()</code></p><p>自动调用，this 指向 window</p><p>函数内的 this 一般指向函数的调用者</p><p>可以通过 <code>call()</code>更改 this 指向，call 的主要作用是实现继承</p><p><code>apply()</code>方法也可以改变 this 指向，参数必须是数组，</p><p>apply 可以用来数组使用数学内置对象，比如求最大值和最小值。eg：<code>Math.max.apply(Math,arr)</code></p><p><code>bind()</code>也可以改变 this 的指向，但不会调用函数，可以创建一个函数来接收（常用）</p><p>比如一个点击函数内部有一个延时执行函数 <code>setTimeout(function(){}，1000)</code>,需要改变 function 这个函数的指向（原本这个函数是 window 提供的，this 指向 window），可以通过 <code>setTimeout(function(){}.bind(this)，1000)</code>指向 点击的对象</p><p>在 es5 的构造函数内需要声明一个全局变量 taht 去储存 this，明确指向问题，但可以通过 bind（本身指向，新变量）来处理，在调用时要把新变量传过去</p><h3 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h3><p>JS 内有严格模式，在 ES5 可以使用，IE10+支持</p><p>开启严格模式<code>use strict</code>，严格模式声明在所有语句之前</p><p>严格模式可以部分开启也可以全部开启</p><p>1.变量规定，不声明的变量会报错</p><p>2.不能删除已声明的变量</p><p>3.严格模式下全局作用域的函数 this 指向 underfind</p><p>4.定时器的 this 指向 window</p><h3 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h3><p>高阶函数是将函数作为参数，常见的为回调函数</p><h4 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h4><p>闭包是一个有权访问另一个函数局部作用域中变量的函数，闭包本质是一个函数，常见为一个函数包括另一个函数，被包括的函数可以访问外部函数的变量</p><p>除此之外也可以通过返回在父函数内的子函数的方式访问局部变量</p><p>闭包的作用：延伸了变量的作用范围</p><p>用闭包处理点击获得 li 的索引号,用立即执行函数创建小闭包</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">for（</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">lis.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">）{</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">i</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    ​ lis[i].onclick</span><span style="color:#D73A49;">=function</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    ​ console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  })(i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h4><p>函数内部调用函数本身，类似循环</p><p>容易发生栈溢出，需要加 return 退出</p><p>求阶乘</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> fn</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">​  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">（n</span><span style="color:#D73A49;">===</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">）{</span></span>
<span class="line"><span style="color:#24292E;">  ​ </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">​  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">f（n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>比如 n 是 3 会变成 <code>3 x f（2）&gt; 3 x 2 x f(1)</code></p>`,251)]))}const b=a(l,[["render",o]]);export{u as __pageData,b as default};
