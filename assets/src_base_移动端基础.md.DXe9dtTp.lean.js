import{_ as p,c as e,a2 as a,o as n}from"./chunks/framework.DPuwY6B9.js";const m=JSON.parse('{"title":"移动端","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/移动端基础.md","filePath":"src/base/移动端基础.md","lastUpdated":1713863841000}'),o={name:"src/base/移动端基础.md"};function l(t,s,c,r,i,d){return n(),e("div",null,s[0]||(s[0]=[a(`<h1 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h1><p>移动端浏览器主要是 webkit 内核</p><p>viewport 视口 手动添加 meta 标签</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#6F42C1;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#6F42C1;"> content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;width=device-width,user-scalable=no,initial-scale=1,maximum-scale=1,minimum-scale=1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">// 宽度等于设备的宽度  限制用户缩放  初始比例缩放  最大缩放  最小缩放</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>PC 端 1px 为 1 物理像素</p><p>移动端每种设备物理像素比不一样，在 iPhone8 内是两倍</p><p>通常会使用倍图来设计，具体几倍看公司的需求，准备一个比样式图大几倍的图片，通常为二倍图</p><p>背景图大小通过 background-size 设定，除了像素之外还有 cover，将整个盒子盖住，contain，将宽度或高度适应盒子，含有空白区域</p><h2 id="常见移动端布局" tabindex="-1">常见移动端布局 <a class="header-anchor" href="#常见移动端布局" aria-label="Permalink to &quot;常见移动端布局&quot;">​</a></h2><p>移动端初始化样式推荐使用<a href="https://necolas.github.io/normalize.css/" target="_blank" rel="noreferrer">mormalize.css</a></p><p>清除高亮：<code>-webkit-tap-highlight-cokor:transparent</code> 设置为透明</p><p>给输入框定义样式<code>-webkit-appearance:none</code></p><p>禁止长按弹出菜单：<code>img,a{-webkit-touch-callout：none}</code></p><h3 id="流式布局-百分比布局" tabindex="-1">流式布局（百分比布局） <a class="header-anchor" href="#流式布局-百分比布局" aria-label="Permalink to &quot;流式布局（百分比布局）&quot;">​</a></h3><p>将宽度设置为百分比，随着屏幕宽度变化</p><p>设置最大和最小宽度，保证内容在合理范围</p><p>一般最小设置为 320px</p><p>二倍精灵图先缩放为一半，然后测量图片位置，最后将 background-size 将整张图缩小一半</p><h3 id="flex-弹性布局" tabindex="-1">flex 弹性布局 <a class="header-anchor" href="#flex-弹性布局" aria-label="Permalink to &quot;flex 弹性布局&quot;">​</a></h3><p>父盒子设置 flex 后，子盒子的 float、clear 和 align 都将失效，通过给父元素设置 flex 属性来控制子盒子的排列方式和位置</p><p>固定定位和父元素无关，它以屏幕为准</p><p><strong>常用属性</strong></p><p><code>flex-direction</code> 设置主轴方向 默认为 row 即 x 轴</p><p>row x 轴 row-reverse 翻转 x 轴 column 为 y 轴 column-reverse 翻转 y 轴</p><p><code>justify-content</code> 设置主轴上的排列方式（先确定主轴的方向） 默认为 flex-start 从左到右</p><p>flex-end 从右到左</p><p>center 居中对齐</p><p>space-around 平均分配空间</p><p>space-between 先两边贴边再平分剩余空间</p><p>flex-wrap 设置子元素是否换行</p><p>nowrap 默认不换行，如果放不下会强行缩小子元素的宽度</p><p>wrap，设置换行</p><p><code>align-items</code> 设置侧轴的排列方式（单行）</p><p>flex-start 上部</p><p>center 居中</p><p>flex-end 底部</p><p>stretch 拉伸</p><p><code>align-content</code> 设置多行的排列方式，前提是先换行，单行无效果</p><p>flex-start 整体从头对齐</p><p>center 整体居中</p><p>flex-end 从尾对齐</p><p>space-around 平分空间</p><p>space-between 两边贴边，其余平分</p><p>stretch 拉伸</p><h3 id="less-rem-媒体查询布局" tabindex="-1">less+rem+媒体查询布局 <a class="header-anchor" href="#less-rem-媒体查询布局" aria-label="Permalink to &quot;less+rem+媒体查询布局&quot;">​</a></h3><p><strong>rem</strong></p><p>em 是缩进用的，相对于父元素的字体大小</p><p>而 rem 是相对于 html 的字体大小，如果将 html 的字体设置为 12px,2rem 则为 24px</p><p><strong>媒体查询</strong></p><p>@media 可以针对不同的屏幕尺寸设置不同的样式</p><p><code>@media screen and （max-width：800px）{}</code>在最大屏幕宽度是即小于 800px 时使用这个样式，也可将 max 改为 min</p><p>screen 可替换为 all</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">@media screen </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">width: 300px) {</span></span>
<span class="line"><span style="color:#24292E;">  body {</span></span>
<span class="line"><span style="color:#24292E;">  　　 background</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">:lightblue;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以直接在 link 引入 css 时判断屏幕尺寸从而引入不同的 css</p><p><strong>less</strong></p><p>less 是一种 css 扩展语言 还有 sass、stylus 皆为 css 预处理语言</p><p>less 需要编译为 css 文件才能被 html 使用，使用 ease less 插件可自动转换</p><p>less 变量</p><p>@变量名：值；<code>@a: 100px</code> 大小写敏感且不能以数字开头</p><p>之后调用变量名即可</p><p>less 嵌套</p><p>less 嵌套将子元素样式直接写在父元素里面</p><p>可用<code>+ - * /</code> 进行运算，除法要加括号才能运算，<strong>符号左右要有空格</strong></p><p>如果两个数只有一个有单位则结果就是那个单位，如果有两个单位则以第一个值的单位为准</p><p>flexible.js</p><p>不需要写媒体查询，引用 js 来计算</p><p>csstorem 插件</p><p>cssrem 可以将 px 装换为 rem</p><p>在使用之前要先设置 cssrootfont（默认为 16px）改为设计稿大小</p><h3 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h3><p>原理是通过媒体查询来适配不同设备，响应式布局通过父级元素改变来控制子元素排列（即 container 类，container-fluid 为流式布局）基于 Twitter，react 是基于 facebook 的</p><p>超小屏幕：小于 768px 宽度 100%</p><p>小屏平板：768-992 宽度 750px</p><p>中等屏幕：992-1200 宽度 970px</p><p>大屏幕：1200+ 宽度 1170px</p><p><a href="https://v3.bootcss.com/" target="_blank" rel="noreferrer">bootstrap 框架</a> 点击可直接查看文档</p><p><strong>栅格</strong></p><p>将页面划分为等宽的列，无论系统屏幕多宽都会划分为 12 列，它不是栅格整个页面，而是栅格 container</p><p>要栅格需要添加类前缀，后面跟份数</p><p>最小的.col-xs-</p><p>小屏.col-sm-</p><p>中等 .col-md-</p><p>大屏.col-lg-</p><p>如果刚好等于 12 则占一行，小于有留白，多余的则那部分另起一行</p><p>每一列默认有 15px 的 padding</p><p>可以写多类名，col-lg-3，col-md-4，这样同时给类名可以在不同屏幕尺寸展示不同的列数</p><p>bootstrap 嵌套</p><p>可以再 bootstrap 里面进行再嵌套，将子类分为 12 等份，嵌套前需要再加一个 row，可以清除默认的 padding 值，还能将高度改为和父元素一样高</p><p>列偏移</p><p>.col-md-offset-可以进行偏移，将偏移的数字写在后面即可，本质是加左边的 margin 值</p><p>列排序</p><p>.col-md-push- 向右推</p><p>.col-md-pull- 向左拉</p><p>响应式</p><p>通过设置 hidden 隐藏部分列与之相反的为 visible</p><p>.hidden-xs 隐藏最小屏</p><p>.hidden-sm 隐藏小屏</p><p>.hidden-md 隐藏中屏</p><p>.hidden-lg 隐藏大屏</p><p>bootstrap 内有清除浮动，改颜色，标题等，可以直接去调用样式</p><h3 id="vw-vh-布局" tabindex="-1">vw vh 布局 <a class="header-anchor" href="#vw-vh-布局" aria-label="Permalink to &quot;vw vh 布局&quot;">​</a></h3><p>vw,vh 是相对单位，就可以不用媒体查询</p><p>vw：viewport width 1vw=1/100 视口宽度，即浏览器窗口为 1000px 时，1vw=10px</p><p>vh：viewport height 1vw=1/100 视口高度</p><p>和百分比的区别是，百分比是相对父元素的，vw、vh 则是对于视口单位</p><p>开发中比较多用 vw，（vh 较少用，因为要按宽度进行比例缩放）</p><p>插件 px2vw</p><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><p><code>touch</code> 触摸事件</p><p><code>touchstart</code> 开始触摸</p><p><code>tuochmove</code> 拖动触摸</p><p><code>touchend</code> 触摸离开</p><p><code>touches</code> 正在触摸屏幕的所有手指</p><p><code>targetTouches</code> 正在触摸当前 dom 元素的所有手指(最常用)<code>targetTouches[0]</code>可以获取触摸的第一个手指的相关信息，手指坐标等</p><p><code>changedTouches </code>手指状态发生改变的列表，从无到有，从有到无</p><p>在进行手指移动时要阻止屏幕滚动，<code>e.preventDefault()</code></p><p>移动端让盒子移动直接用 <code>translate</code></p><p>无缝滚动使用监听过度完成的事件 <code>transitionend</code></p><p>手指离开要开启定时器，但开启前要清除定时器，当需要进行触摸移动时记得阻止屏幕移动</p><p>移动端 click 事件会有 300ms 的延迟，因为双击缩放页面</p><h2 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h2><h3 id="窗口等比例缩放" tabindex="-1">窗口等比例缩放 <a class="header-anchor" href="#窗口等比例缩放" aria-label="Permalink to &quot;窗口等比例缩放&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> designWidth</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> 375</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> scale</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.documentElement.clientWidth</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">designWidth</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;meta[name=&#39;</span><span style="color:#24292E;">viewport</span><span style="color:#032F62;">&#39;]&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;width=device-width&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &#39;,initial-scale=&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> scale </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;,minimum-scale=&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> scale </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#032F62;">&#39;,maximum-scale=&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> scale </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;,user-scalable=no&#39;</span></span>
<span class="line"><span style="color:#24292E;">viewport.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content&#39;</span><span style="color:#24292E;">, content)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>尽量不要使用 12px 及以下的图片或字体，否则可能出现图片或文字在安卓和 IOS 不同</p><p>多个 image 之间可能有缝隙解决方法</p><p>1、将 Image 设置为块级元素：<code>display:block</code>;。这将使得 <code>vertical-align</code> 属性失效，因为它不适用于块级元素，且会导致图片独占一行，文字会跑到下面一行。</p><p>2、更改 Image 的 <code>vertical-align</code> 属性：<code>vertical-align:bottom</code>; 或者其他值，如 top、middle 等。</p><p>3、修改父元素的 <code>line-height</code> 值。图片下面的空隙高度，实际上是文字计算后的行高值和字母 x 下边缘的距离。</p><p>4、紧挨着写：将所有的 <code>&lt;img&gt; </code>标签写在一行，不要有换行或空格。</p><p>5、设置父对象的文字大小为 0px：这样可以消除图片之间的间隙，但是这种方法的缺点是父对象不能有文字。</p><p>6、设置图片的浮动属性：可以配合 <code>overflow: hidden</code>; 使用，创建一个 BFC 环境。</p><p>7、设置负边距：给每一张图片加一个 -1 的 margin。</p>`,133)]))}const u=p(o,[["render",l]]);export{m as __pageData,u as default};
