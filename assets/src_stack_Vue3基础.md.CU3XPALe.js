import{_ as n,c as a,a2 as l,o as p}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Vue3 基础","description":"","frontmatter":{},"headers":[],"relativePath":"src/stack/Vue3基础.md","filePath":"src/stack/Vue3基础.md","lastUpdated":1714114110000}'),e={name:"src/stack/Vue3基础.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue3-基础" tabindex="-1">Vue3 基础 <a class="header-anchor" href="#vue3-基础" aria-label="Permalink to &quot;Vue3 基础&quot;">​</a></h1><p>使用脚手架搭建需要确保@vue/cli 版本在 4.5.0 以上 查看@vue/cli 版本 <code>vue --version</code></p><p>如果 vue/cli 版本过低或上方命令报错，需要安装或者升级你的 @vue/cli <code>npm install -g @vue/cli</code></p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">vue2           </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#24292E;">      vue3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">beforeCreate   </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      setup</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">created        </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      setup</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">beforeMount    </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onBeforeMount</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">mounted        </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onMounted</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">beforeUpdate   </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onBeforeUpdate</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">updated        </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onUpdated</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">beforeDestroy  </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onBeforeUnmount</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">destroyed      </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onUnmounted</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">activated      </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onActivated</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">deactivated    </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onDeactivated</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span>
<span class="line"><span style="color:#24292E;">errorCaptured  </span><span style="color:#D73A49;">--------&gt;</span><span style="color:#6F42C1;">      onErrorCaptured</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="setup" tabindex="-1">setup() <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;setup()&quot;">​</a></h2><p>Composition API 将 vue 中的很多功能拆分成了一个一个的 hook</p><p>可以理解为 Vue3 中一个新的配置项，值为一个函数 <code>setup()</code></p><p><code>setup()</code> 是所有 Composition API(组合式 API)的入口</p><p>在 <code>setup()</code> 函数内的 <code>this</code> 指向 <code>undefined</code></p><p>setup 函数是处于生命周期函数 <code>beforeCreate</code> 和 <code>Created</code> 两个钩子函数之前的函数，也就说在 setup 函数中是无法使用 <code>data</code> 和 <code>methods</code> 中的数据和方法的</p><p>在 setup 函数中定义的变量和方法最后都是需要 <code>return</code> 出去的，不然无法在模板中使用</p><p>注意：如果 <code>data</code> 内的变量和 <code>setup</code> 函数内的变量重名，优先使用 <code>setup</code> 里面的变量</p><p>setup 可以接受参数 <code>props</code> 和 <code>content</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(props, content){}</span></span>
<span class="line"><span style="color:#24292E;"># or</span></span>
<span class="line"><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(props, { attrs, slots, emit }) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h3><p>组件外部传递进入或组件内部声明已经接收的属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">son</span><span style="color:#B31D28;font-style:italic;"> :name</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;obj.name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">son</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;我是子组件&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ name }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">    name: { type: String }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">(props, context) {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(props)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h3><p>包含 <code>attrs</code>，<code>slots</code> 和 <code>emit</code>，<code>content</code> 参数可以解构</p><h4 id="attrs" tabindex="-1">attrs <a class="header-anchor" href="#attrs" aria-label="Permalink to &quot;attrs&quot;">​</a></h4><p>是组件外部传递进入组件的值，但组件内部未在 <code>props</code> 内声明，即可使用 <code>context.attrs</code> 得到</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">son</span><span style="color:#B31D28;font-style:italic;"> :name</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;obj.name&quot;</span><span style="color:#B31D28;font-style:italic;"> :age</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;obj.age&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">son</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">    name: { type: String }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">(props, context) {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(props)</span></span>
<span class="line"><span style="color:#24292E;">    console.log(context.attrs.age)</span><span style="color:#6A737D;">// 此时未在props声明age</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="emit" tabindex="-1">emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;emit&quot;">​</a></h4><p>用于分发自定义函数，等同于 <code>this.$emit</code>，可用于子向父传值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;son&quot;</span><span style="color:#24292E;">&gt;子组件&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">(props, context) {</span></span>
<span class="line"><span style="color:#24292E;">    const </span><span style="color:#6F42C1;">son</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      context.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    return { son }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;我是父组件&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;子组件可以改变我的值{{ sonval }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;---------------------------------------&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">son</span><span style="color:#B31D28;font-style:italic;"> :name</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;obj.name&quot;</span><span style="color:#B31D28;font-style:italic;"> :age</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;obj.age&quot;</span><span style="color:#B31D28;font-style:italic;"> @change</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;formSon&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">son</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import son from &#39;../components/son.vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">import { ref } from &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;Father&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  components: { son },</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    let sonval </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    const </span><span style="color:#6F42C1;">formSon</span><span style="color:#D73A49;"> =</span><span style="color:#E36209;"> val</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      sonval.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    return { formSon, sonval }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="slots" tabindex="-1">slots <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;slots&quot;">​</a></h4><p>可以获取插槽的内容，相当于 <code>this.$slots</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;我是子组件&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">slot</span><span style="color:#6F42C1;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;son&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;默认插槽&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">    name: { type: String }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">(props, context) {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(context.slots.son()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span><span style="color:#6A737D;">// 获取slot的信息</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;son&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;template v-slot:son</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;我是父组件呵呵哈哈哈&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">  &lt;/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">son</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="setup-语法糖" tabindex="-1">setup 语法糖 <a class="header-anchor" href="#setup-语法糖" aria-label="Permalink to &quot;setup 语法糖&quot;">​</a></h2><p>vue3.2 开始，在 script 脚本上声明 setup 会自动将所有顶级函数和变量自动暴露给模板使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ name }}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;changeName&quot;</span><span style="color:#24292E;">&gt;改变名字&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">const name = ref(&#39;user&#39;)</span></span>
<span class="line"><span style="color:#24292E;">const changeName = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  name.value </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;newUser&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>因为没有了 setup 函数，如果需要使用 <code>props</code>，<code>emit</code>，<code>attrs</code> 等参数，需要调用相关函数</p><p><code>defineProps</code>用来接收父组件传来的 <code>props</code></p><p><code>defineEmits</code> 用来声明触发的事件</p><p><code>useAttrs</code> 用来接收父组件传递但子组件未使用 <code>props</code> 接收的变量</p><p><code>useSlots</code> 用来获取插槽相关信息</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> emit</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> defineEmits</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> props</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> defineProps</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> slots</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> useSlots</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> attrs</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> useAttrs</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="数据定义" tabindex="-1">数据定义 <a class="header-anchor" href="#数据定义" aria-label="Permalink to &quot;数据定义&quot;">​</a></h2><h3 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h3><p>使用 ref 可以定义一个响应式数据 <code>const xxx=ref(initValue)</code></p><p>使用前需要按需导入，ref 定义的响应式数据修改数据时必需要<code>.value</code>取值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">// 括号内的为初始值</span></span>
<span class="line"><span style="color:#24292E;">// 基本数据类型 number,string,boolean</span></span>
<span class="line"><span style="color:#24292E;">let name=ref(&#39;张三&#39;);</span></span>
<span class="line"><span style="color:#24292E;">let age=ref(18);</span></span>
<span class="line"><span style="color:#24292E;">let isMarry=ref(false);</span></span>
<span class="line"><span style="color:#24292E;">// 使用ref定义数组</span></span>
<span class="line"><span style="color:#24292E;">let hobby=ref([&#39;吃饭&#39;,&#39;睡觉&#39;,&#39;打豆豆&#39;]);</span></span>
<span class="line"><span style="color:#24292E;">// 使用ref定义对象</span></span>
<span class="line"><span style="color:#24292E;">let user=ref({</span></span>
<span class="line"><span style="color:#24292E;">  idCard:</span><span style="color:#032F62;">&#39;身份证&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  nation:[</span><span style="color:#032F62;">&#39;中国&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;美国&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;英国&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;俄罗斯&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">const changeName = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  name.value </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;李四&#39;</span><span style="color:#6A737D;">// name.value修改数据</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="reactive-函数" tabindex="-1">reactive 函数 <a class="header-anchor" href="#reactive-函数" aria-label="Permalink to &quot;reactive 函数&quot;">​</a></h3><p>使用 <code>reactive</code> 可以定义一个响应式数据 <code>const 代理对象=reactive(被代理的对象)</code> 接收一个对象(或数组)，返回一个代理器对象(Proxy 的实例对象，简称 Proxy 对象)</p><p>使用前需要按需导入<code>reactive</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { reactive } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">let student=reactive({</span></span>
<span class="line"><span style="color:#24292E;">  name:</span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  hobbies:[</span><span style="color:#032F62;">&#39;吃饭&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;睡觉&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;打豆豆&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.log(student)</span></span>
<span class="line"><span style="color:#24292E;">const changeName = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  student.name </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;李四&#39;</span><span style="color:#6A737D;"> // 直接修改数据</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="reactive-与-ref" tabindex="-1">reactive 与 ref <a class="header-anchor" href="#reactive-与-ref" aria-label="Permalink to &quot;reactive 与 ref&quot;">​</a></h3><p><code>ref</code> 多用来定义：基本类型数据</p><p><code>reactive</code> 多用来定义：对象(或数组)类型数据</p><p>注意：ref 也可以用来定义对象（或数组）类型的数据，它内部会自动通过 reactive 转为代理对象</p><p>两者原理</p><p><code>ref</code> 通过 <code>Object.defineProperty()</code>的 get 和 set 实现(响应式)数据劫持</p><p><code>reactive</code> 通过使用 <code>Proxy</code> 来实现响应式(数据劫持),并通过 Reflect 操作源对象内部的数据 从使用角度</p><p>所以 <code>ref</code> 操作数据需要<code>.value</code>,但 <code>reactive</code> 定义的数据可以直接修改</p><h3 id="toref、torefs" tabindex="-1">toRef、toRefs <a class="header-anchor" href="#toref、torefs" aria-label="Permalink to &quot;toRef、toRefs&quot;">​</a></h3><p>使用 toRef 创建一个 ref 对象，其 value 值指向另一个对象中的某个属性值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;姓名：{{name}}&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;年龄：{{age}}&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  import {reactive,toRef} from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">  export default {</span></span>
<span class="line"><span style="color:#6F42C1;">    setup</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      let person</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        name:</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        age:</span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      return{</span></span>
<span class="line"><span style="color:#6F42C1;">        name</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">toRef</span><span style="color:#24292E;">(person, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6F42C1;">        age</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">toRef</span><span style="color:#24292E;">(person, </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>toRefs 与 toRef 功能一致，但可以批量创建多个 ref 对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;姓名：{{name}}&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;年龄：{{age}}&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  import {reactive,toRef} from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">  export default {</span></span>
<span class="line"><span style="color:#6F42C1;">    setup</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      let person</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        name:</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        age:</span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      return{</span></span>
<span class="line"><span style="color:#D73A49;">        ...</span><span style="color:#6F42C1;">toRefs</span><span style="color:#24292E;">(person)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="数据处理" tabindex="-1">数据处理 <a class="header-anchor" href="#数据处理" aria-label="Permalink to &quot;数据处理&quot;">​</a></h2><h3 id="shallowref-和-shallowreactive" tabindex="-1">shallowRef 和 shallowReactive <a class="header-anchor" href="#shallowref-和-shallowreactive" aria-label="Permalink to &quot;shallowRef 和 shallowReactive&quot;">​</a></h3><p><code>shallowReactive</code>：只处理对象最外层属性的响应式(浅响应式)，对深层次的数据不会改变视图但会改变数据</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> state</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> shallowReactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  nested: {</span></span>
<span class="line"><span style="color:#24292E;">    bar: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 改变 state 本身的性质是响应式的</span></span>
<span class="line"><span style="color:#24292E;">state.foo</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#6A737D;">// ...但是不转换嵌套对象</span></span>
<span class="line"><span style="color:#6F42C1;">isReactive</span><span style="color:#24292E;">(state.nested) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">state.nested.bar</span><span style="color:#D73A49;">++</span><span style="color:#6A737D;"> // 非响应式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果有一个对象数据，结构比较深，但变化时只是外层属性变化用 <code>shallowReactive</code></p><p><code>shallowRef</code>: 只处理基本数据类型的响应式，不进行对象的响应式处理</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> a</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> shallowRef</span><span style="color:#24292E;">({ b: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">a.value.b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#6A737D;"> //视图不会更新</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.value) </span><span style="color:#6A737D;">//{b : 2} 但是能追踪到值得变化</span></span>
<span class="line"><span style="color:#24292E;">a.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">//一整个替换时，视图会变化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换用 <code>shallowRef</code></p><h3 id="readonly-和-shallowreadonly" tabindex="-1">readonly 和 shallowReadonly <a class="header-anchor" href="#readonly-和-shallowreadonly" aria-label="Permalink to &quot;readonly 和 shallowReadonly&quot;">​</a></h3><p><code>readonly</code>:让一个响应式数据变为只读的(深只读)，所有的数据将无法被修改</p><p><code>shallowReadonly</code>:让一个响应式变为只读的(浅只读)，基本数据类型无法被修改，对象可以被修改</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ sum }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;sum++&quot;</span><span style="color:#24292E;">&gt;sum按钮&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ name }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;name += &#39;~&#39;&quot;</span><span style="color:#24292E;">&gt;按钮name&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{{ job.j1.salary }}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;job.j1.salary++&quot;</span><span style="color:#24292E;">&gt;按钮salary&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { reactive, ref, toRefs, shallowReadonly } from &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;DemoComponent&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    let sum </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    let person </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      job: {</span></span>
<span class="line"><span style="color:#24292E;">        j1: {</span></span>
<span class="line"><span style="color:#24292E;">          salary: </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#6A737D;">    // 深只读，对象层次深也能检测不能改变数据</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> readonly</span><span style="color:#24292E;">(person);</span></span>
<span class="line"><span style="color:#6A737D;">    // 浅只读，只能控制第一层</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> shallowReadonly</span><span style="color:#24292E;">(person);</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#24292E;">      sum,</span></span>
<span class="line"><span style="color:#D73A49;">      ...</span><span style="color:#6F42C1;">toRefs</span><span style="color:#24292E;">(person),</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="toraw-和-markraw" tabindex="-1">toRaw 和 markRaw <a class="header-anchor" href="#toraw-和-markraw" aria-label="Permalink to &quot;toRaw 和 markRaw&quot;">​</a></h3><p><code>toRaw</code> 将一个由 <code>reactive</code> 生成的响应式对象转为普通对象对这个普通对象的所有操作，不会引起页面更新，对 ref 定义的响应式数据无效！</p><p><code>markRow</code> 标记一个对象，使其永远不会再成为响应式对象。有些值不应该被设置为响应式的，例如复杂的第三方类库，当渲染具有不可变的数据源的大列表时，跳过响应式转换可以提高性能</p><h3 id="响应式数据的判断" tabindex="-1">响应式数据的判断 <a class="header-anchor" href="#响应式数据的判断" aria-label="Permalink to &quot;响应式数据的判断&quot;">​</a></h3><p><code>isRef</code>：检查一个值是否为 <code>ref</code> 对象</p><p><code>isReactive</code>：检查一个对象是否由 <code>reactive</code> 创建的响应式代理</p><p><code>isReadonly</code>：检查一个对象是否由 <code>readonly</code> 创建的只读代理</p><p><code>isProxy</code>：检查一个对象是否由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</p><h3 id="provide-和-inject" tabindex="-1">provide 和 inject <a class="header-anchor" href="#provide-和-inject" aria-label="Permalink to &quot;provide 和 inject&quot;">​</a></h3><p>用于实现祖与后代组件间通信</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;我是祖组件&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;汽车信息&lt;/</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;名称：{{name}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;价格：{{price}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">inject_component</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">inject_component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  import {reactive,toRefs,provide} from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">  export default {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;provide_component&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    setup</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      let car</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        name:</span><span style="color:#032F62;">&#39;宝马&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        price:</span><span style="color:#032F62;">&#39;40w&#39;</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#6F42C1;">      provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;car&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">car</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 提供provide</span></span>
<span class="line"><span style="color:#24292E;">      return{</span></span>
<span class="line"><span style="color:#D73A49;">        ...</span><span style="color:#6F42C1;">toRefs</span><span style="color:#24292E;">(car)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;我是孙组件&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;汽车信息&lt;/</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;名称：{{name}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;价格：{{price}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  import {inject,toRefs,ref} from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">  export default {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;inject_component&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    setup</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      let car</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">inject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;car&quot;</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">//使用inject接收</span></span>
<span class="line"><span style="color:#24292E;">      return{</span></span>
<span class="line"><span style="color:#D73A49;">        ...</span><span style="color:#6F42C1;">toRefs</span><span style="color:#24292E;">(car)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="过滤器" tabindex="-1">过滤器 <a class="header-anchor" href="#过滤器" aria-label="Permalink to &quot;过滤器&quot;">​</a></h3><p>vue3 建议使用计算属性代替过滤器，如果需要全局过滤器可以自定义全局属性</p><p>// 定义全局属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">app.config.globalProperties.$filters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">  currencyUSD</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#032F62;"> &#39;$&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,87)]))}const d=n(e,[["render",o]]);export{u as __pageData,d as default};
