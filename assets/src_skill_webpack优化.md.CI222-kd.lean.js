import{_ as c,c as o,a2 as d,o as a}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"webpack 优化","description":"","frontmatter":{},"headers":[],"relativePath":"src/skill/webpack优化.md","filePath":"src/skill/webpack优化.md","lastUpdated":1714114110000}'),p={name:"src/skill/webpack优化.md"};function l(r,e,t,i,s,n){return a(),o("div",null,e[0]||(e[0]=[d('<h1 id="webpack-优化" tabindex="-1">webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-label="Permalink to &quot;webpack 优化&quot;">​</a></h1><h2 id="编译优化" tabindex="-1">编译优化 <a class="header-anchor" href="#编译优化" aria-label="Permalink to &quot;编译优化&quot;">​</a></h2><p>1、使用缓存：缓存可以显著提高编译速度。例如，<code>babel-loader</code> 的 <code>cacheDirectory</code> 选项可以将转译的结果缓存到文件系统中，此外，<code>cache-loader</code> 可以将其他 <code>loader</code> 的处理结果缓存到磁盘。</p><p>2、<code>DLL</code> 动态链接库：<code>DLL</code> 文件为动态链接库，在一个动态链接库中可以包含给其他模块调用的函数和数据。原因在于包含大量复用模块的动态链接库只需要编译一次，在之后的构建过程中被动态链接库包含的模块将不会在重新编译，而是直接使用动态链接库中的代码。</p><p>3、性能分析：使用 <code>speed-measure-webpack-plugin</code> 进行速度分析，可以看到每一个 <code>Loader</code> 以及 <code>Plugin</code> 的耗时。</p><p>4、合理配置：例如，使用 <code>include</code> 或者 <code>exclude</code> 配置，来避免重复打包。</p><p>5、提升基础环境版本：更新到最新的 <code>Webpack</code> 版本，可以利用最新的性能优化。</p><p>6、启用多进程打包：可以进一步提高打包速度。</p><p>7、开发中使用热更新替换自动刷新：这样可以避免每次修改代码后都需要完全重新构建。</p><p>8、使用 <code>DllPlugin</code> 插件：优化提高打包时间。</p><h2 id="打包优化" tabindex="-1">打包优化 <a class="header-anchor" href="#打包优化" aria-label="Permalink to &quot;打包优化&quot;">​</a></h2><p>1、提升基础环境版本：更新到最新的 <code>Webpack</code> 版本，可以利用最新的性能优化。</p><p>2、 使用 <code>include</code> 或者 <code>exclude</code> 配置：避免重复打包。</p><p>3、 合理的利用缓存来减少打包时间：例如，<code>babel-loader</code> 的 <code>cacheDirectory</code> 选项可以将转译的结果缓存到文件系统中</p><p>4、 合理的使用 <code>plugin</code>：减少打包时间和体积。</p><p>5、 合理配置 <code>relosve</code>：防止减慢打包时间。</p><p>6、 启用多进程打包：可以进一步提高打包速度。</p><p>7、开发中使用热更新替换自动刷新：这样可以避免每次修改代码后都需要完全重新构建。</p><p>8、 使用 <code>DllPlugin</code> 插件：优化提高打包时间。</p><p>9、 使用 <code>speed-measure-webpack-plugin</code> 插件：它分析 <code>webpack</code> 的总打包耗时以及每个 <code>plugin</code> 和 <code>loader</code> 的打包耗时，从而让我们对打包时间较长的部分进行针对性优化。</p>',20)]))}const k=c(p,[["render",l]]);export{u as __pageData,k as default};
