import{_ as n,c as a,a2 as l,o as p}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Vue2 基础","description":"","frontmatter":{},"headers":[],"relativePath":"src/stack/Vue2基础.md","filePath":"src/stack/Vue2基础.md","lastUpdated":1714114110000}'),e={name:"src/stack/Vue2基础.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue2-基础" tabindex="-1">Vue2 基础 <a class="header-anchor" href="#vue2-基础" aria-label="Permalink to &quot;Vue2 基础&quot;">​</a></h1><p>数据驱动视图（vue 会监听数据变化，自动渲染 dom，是单向的数据绑定）</p><p>双向数据绑定（在网页中 form 负责采集数据，ajax 负责提交数据，不需要操作 dom 来获取表单最新的值，最新的数据会自动更新到 js 数据中）</p><p>MVVM 是 vue 实现数据驱动视图和双向数据绑定的核心原理，MVVM 指的是 <code>Model</code>，<code>View</code> 和 <code>ViewModel</code>，它把每个 html 分成这三个部分</p><p><code>Model</code> 是数据源，<code>View</code> 是所渲染的 Dom，<code>ViewModel</code> 是 Vue 的实例，将 Model 和 View 连接起来</p><h2 id="vue-基础使用" tabindex="-1">Vue 基础使用 <a class="header-anchor" href="#vue-基础使用" aria-label="Permalink to &quot;Vue 基础使用&quot;">​</a></h2><p>注: 不借助脚手架</p><p>1、导入 vue.js 的脚本</p><p>2、在页面中声明一个将要被 vue 控制的 Dom</p><p>3、创建 vm 实例对象（vue 实例对象）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> &gt;{{usernane}}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">scrit</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">Const vm = new Vue{</span></span>
<span class="line"><span style="color:#6A737D;">  //el是固定写法，表示要控制的区域，接收一个选择器</span></span>
<span class="line"><span style="color:#24292E;">  el:</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  data:{</span></span>
<span class="line"><span style="color:#24292E;">      usernae:</span><span style="color:#032F62;">&#39;zhangsan&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="vue-cli" tabindex="-1">vue.cli <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;vue.cli&quot;">​</a></h3><p>vue.js 开发的标准工具，简化了 webpack 创建工程化 vue 项目的功能</p><p>安装<code>npm install -g@ vue/cli</code></p><p>创建项目 <code>vue create 项目名</code></p><p>src 目录构成</p><p><code>assets</code> 文件夹：存放项目中用到的静态资源文件，例如：css 样式表、图片资源</p><p><code>components</code> 文件夹：程序员封装的、可复用的组件，都要放到 components 目录下</p><p><code>main.js</code> 是项目的入口文件。整个项目的运行，要先执行 main.js</p><p><code>App.vue</code> 是项目的根组件</p><p>运行流程</p><p>整个 vue 项目是通过 main.js 将 app.vue 渲染到 index.html 页面</p><p>vue 实例下的<code>$mount(&#39;#app&#39;)</code>方法和 el 属性功能一样</p><h2 id="vue-指令" tabindex="-1">Vue 指令 <a class="header-anchor" href="#vue-指令" aria-label="Permalink to &quot;Vue 指令&quot;">​</a></h2><p>指令是 vue 的模板语法，用来渲染页面结构</p><h3 id="内容渲染指令" tabindex="-1">内容渲染指令 <a class="header-anchor" href="#内容渲染指令" aria-label="Permalink to &quot;内容渲染指令&quot;">​</a></h3><p>v-text 将覆盖元素内部原有的内容 <code>&lt;p v-text=&quot;username&quot;&gt;&lt;/p&gt;</code></p><p>v-html 渲染为带标签的的 html 元素</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> username</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;&lt;p&gt;{{ username }}&lt;/p&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> v-html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{username}}</span><span style="color:#032F62;">&quot;&gt;&lt;/div&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>双大括号插值表达式，将数据渲染到大括号的位置，内部支持简单的 js 运算和方法</p><h3 id="属性绑定指令" tabindex="-1">属性绑定指令 <a class="header-anchor" href="#属性绑定指令" aria-label="Permalink to &quot;属性绑定指令&quot;">​</a></h3><p><code>v-bind </code>为元素属性动态绑定值，可以简写为<code>:</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#6F42C1;"> v-bind</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;tips&quot;</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#B31D28;font-style:italic;"> :placeholder=&quot;tips&quot;</span><span style="color:#24292E;"> &gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="事件绑定指令" tabindex="-1">事件绑定指令 <a class="header-anchor" href="#事件绑定指令" aria-label="Permalink to &quot;事件绑定指令&quot;">​</a></h3><p><code>v-on</code> 绑定事件监听，可以简写为<code>@</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;add&quot;</span><span style="color:#24292E;">&gt;+1&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">scrit</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">Const vm = new Vue{</span></span>
<span class="line"><span style="color:#6A737D;">  //el 是固定写法，表示要控制的区域，接收一个选择器</span></span>
<span class="line"><span style="color:#24292E;">  el:</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">  //要渲染的数据</span></span>
<span class="line"><span style="color:#24292E;">  data:{</span></span>
<span class="line"><span style="color:#24292E;">    usernae:</span><span style="color:#032F62;">&#39;zhangsan&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    count:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  //定义处理事件的函数</span></span>
<span class="line"><span style="color:#24292E;">  method：{</span></span>
<span class="line"><span style="color:#6A737D;">    //()内可以传参</span></span>
<span class="line"><span style="color:#6F42C1;">    add</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>vue 提供了内置变量<code>$event</code>,就是原生的 dom 对象 e，放置传参导致覆盖掉 e，所以传参之后可以使用</p><p><code>@click=show(参数，$event)</code></p><p>vue 提供了阻止默认跳转的事件修饰符 <code>@click.prevent=&quot;xxx&quot;</code></p><p><code>.prevent</code> 阻止默认行为</p><p><code>.stop</code> 阻止冒泡、</p><p>vue 提供了键盘事件的按键修饰符 <code>@keyup.enter=&quot;xxx&quot;</code></p><p><code>enter</code> 代表回车键</p><p><code>esc</code> 代表 esc 键</p><h3 id="双向绑定指令" tabindex="-1">双向绑定指令 <a class="header-anchor" href="#双向绑定指令" aria-label="Permalink to &quot;双向绑定指令&quot;">​</a></h3><p>v-model 会实时渲染数据，是双向的，只能和表单元素进行绑定，v-bind 是单向的</p><p>对数据进行处理的专用修饰符</p><p>将输入的数据转换为数字 <code>v-model.number=&#39;xxx&#39;</code></p><p>去除首尾空格 <code>v-model.trim=&#39;xxx&#39;</code></p><p>在修改的过程中不双向更新，只有修改完毕才进行更新 <code>v-model.lazy=&#39;xxx&#39;</code></p><h3 id="条件渲染指令" tabindex="-1">条件渲染指令 <a class="header-anchor" href="#条件渲染指令" aria-label="Permalink to &quot;条件渲染指令&quot;">​</a></h3><p><code>v-if</code> 会动态的移除和创建元素，如果元素默认是不显示的且用户在离开页面都不会触发显示这个元素用 <code>v-if</code></p><p><code>v-show</code> 只是隐藏元素，设置 display 属性，如果要频繁切换元素，用 <code>v-show</code> 性能更好</p><p>绝大多数不考虑性能问题，直接使用 <code>v-if</code></p><p><code>v-else</code> 必须配合 <code>v-if</code> 使用，除此之外还有 <code>v-else-if</code></p><h3 id="列表渲染指令" tabindex="-1">列表渲染指令 <a class="header-anchor" href="#列表渲染指令" aria-label="Permalink to &quot;列表渲染指令&quot;">​</a></h3><p><code>v-for</code> 基于一个数组渲染一个列表结构，需要使用 <code>item in list</code> 的形式（item 是被循环的一项，list 是数组）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  list</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    {id:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,name:</span><span style="color:#032F62;">&#39;zs&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    {id:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,name:</span><span style="color:#032F62;">&#39;ls&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">li</span><span style="color:#6F42C1;"> v-for</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;item in list&quot;</span><span style="color:#B31D28;font-style:italic;"> :key=&quot;item.id&quot;</span><span style="color:#24292E;"> &gt;{{item.name}}&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>v-for</code> 支持可选第二个参数 <code>v-for=&quot;(item,index) in list&quot;</code>即取出数组的索引</p><p>在使用 <code>v-for</code>，需要绑定<code>:key=&quot;item.id&quot;</code>,尽量将 id 作为 key 的值（key 的值只能是字符串或数字且不能重复）</p><p>vue 中列表循环需加<code>:key=&quot;唯一标识&quot;</code> ，唯一标识一般是 item 里面 id ，因为 vue 组件高度复用增加 Key 可以标识组件的唯一性 ，key 的作用主要是为了高效的更新虚拟 DOM</p><h2 id="过滤器-侦听器-计算属性" tabindex="-1">过滤器 侦听器 计算属性 <a class="header-anchor" href="#过滤器-侦听器-计算属性" aria-label="Permalink to &quot;过滤器 侦听器 计算属性&quot;">​</a></h2><h3 id="过滤器" tabindex="-1">过滤器 <a class="header-anchor" href="#过滤器" aria-label="Permalink to &quot;过滤器&quot;">​</a></h3><p>过滤器常用于文本格式化，用于插值表达式和 <code>v-bind</code> 属性绑定</p><p>过滤器要被添加在 js 表达式的尾部，通过管道符<code>|</code>进行调用</p><p>过滤器函数要被定义在 <code>filters</code> 节点下，和 <code>data</code>，<code>methods</code> 同级</p><p>过滤器中的函数一定要有一个返回值 过滤器中的形参永远是管道符前面的值</p><p>私有过滤器和全局过滤器</p><p>在 <code>filters</code> 节点下的过滤器是私有过滤器，如果需要在多个 vue 实例中共享过滤器，可以通过 <code>Vue.filter()</code>定义全局过滤器</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 私有过滤器</span></span>
<span class="line"><span style="color:#6F42C1;">filters</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6A737D;">//（使用时没有参数，即{{msg|filterA}}）</span></span>
<span class="line"><span style="color:#6F42C1;">  filterA</span><span style="color:#24292E;">(value){</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#032F62;"> &#39;￥&#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">value</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 全局过滤器</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cap&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  str.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>格式化时间可以使用第三方包 day.js</p><p>连续调用过滤器 <code>item.time|xxx|xxx|xxx</code></p><p>过滤器本身是 js 函数，可以传参，但注意第一个参数永远是管道符前的数据</p><h3 id="侦听器" tabindex="-1">侦听器 <a class="header-anchor" href="#侦听器" aria-label="Permalink to &quot;侦听器&quot;">​</a></h3><p>watch 侦听器可以监视数据变化并做出对应操作，本质是一个函数，要监视哪个数据就把数据名作为方法名，新值在前，旧值在后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">: { </span><span style="color:#6F42C1;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  usename</span><span style="color:#24292E;">(newVal, oldVal){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal, oldVal)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>方法格式侦听器和对象格式侦听器</p><p>方法格式侦听器不会在进入页面的时候立刻触发，且如果侦听的是对象也无法侦听对象的变化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  usename</span><span style="color:#24292E;">(newVal, oldVal){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal, oldVal)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>对象格式侦听器可设置 <code>immediate</code> 属性为 <code>true</code> 即可自动触发一次，设置 <code>deep</code> 为 <code>true</code> 可监听对象的变化，<code>handler</code> 是监听数据变化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">  usename</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    handler</span><span style="color:#24292E;">(newVal, oldVal){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal, oldVal)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    immediate</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">，</span></span>
<span class="line"><span style="color:#6F42C1;">    deep</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果需要侦听对象的单个属性变化则使用对象.属性，需要单引号包裹</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">  &#39;info.usename&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">    handler</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal, oldVal)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">，</span></span>
<span class="line"><span style="color:#24292E;">    deep: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h3><p>通过一系列的运算得到一个属性值，通过 <code>computed</code> 节点声明，实现了代码的复用，且依赖的数据变化了，会重新求值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6A737D;">  // 计算属性的 getter</span></span>
<span class="line"><span style="color:#6F42C1;">  reversedMessage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 这个函数只会在 \`message\` 发生变化时才会重新执行</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.message.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>组件是对 UI 结构的复用，vue 组件是以.vue 为后缀的，每个组件由 <code>template+script+style</code> 三部分组成，template 内只能有一个根元素 div，style 内想要使用 less 语法需要在 style 内加 <code>lang=&#39;less&#39;</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//script的默认写法，默认导出</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default{</span></span>
<span class="line"><span style="color:#6A737D;">  // data 是数据源但不能指向对象</span></span>
<span class="line"><span style="color:#6A737D;">  // data必须是一个函数</span></span>
<span class="line"><span style="color:#6A737D;">  // 注：Vue 实例中的 data 是对象，Vue 组件中的 data 必须是函数返回值，vue 实例一般情况不会复用，所以 vue 实例 data 可以是一个对象。但是设计组件的目的就是为了复用，所以组件内的 data 不能是对象。</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">    //通过return将数据返回出去</span></span>
<span class="line"><span style="color:#24292E;">    return{</span></span>
<span class="line"><span style="color:#6F42C1;">      username</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;admin&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>使用组件的三个步骤</p><p>1、使用 import 导入组件</p><p>2、在 script 中使用 <code>components</code> 节点注册组件</p><p>3、以标签的形式在 template 中使用</p><p>全局组件</p><p>在 maim.js 内通过 import 导入组件</p><p><code>Vue.component(&#39;xxx&#39;,import 的组件)</code></p><h3 id="组件的-props" tabindex="-1">组件的 Props <a class="header-anchor" href="#组件的-props" aria-label="Permalink to &quot;组件的 Props&quot;">​</a></h3><p>props 是组件的自定义属性，合理使用 props 可以提高组件的复用性，props 属性和 data 平级</p><p>porps 属性是只读的，尽量避免直接修改 props 的值,如果需要修改就把 props 重新赋值放到 data 内</p><p>props 可以使用 default 设置默认值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  init</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#D73A49;">    default</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>props 传入的默认是字符串，type 可指定 props 的属性，可以是数字、字符串或布尔值 require 设置是否必传</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">init</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#D73A49;">  default</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  type</span><span style="color:#24292E;">: Number，</span></span>
<span class="line"><span style="color:#6F42C1;">  require</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="组件中的样式冲突" tabindex="-1">组件中的样式冲突 <a class="header-anchor" href="#组件中的样式冲突" aria-label="Permalink to &quot;组件中的样式冲突&quot;">​</a></h3><p>默认情况下，.vue 的组件样式是全局生效的</p><p>解决方法：在 style 标签加 scope 属性</p><p>如果父组件中要改子组件的样式，需要在样式前加</p><p><code>/deep/</code>、 <code>::v-deep</code>多用于修改第三方库组件（vant、element-ui）样式的需求</p><h3 id="组件的生命周期" tabindex="-1">组件的生命周期 <a class="header-anchor" href="#组件的生命周期" aria-label="Permalink to &quot;组件的生命周期&quot;">​</a></h3><p>组件从创建====运行====销毁的过程是组件的生命周期</p><p>组件创建阶段</p><p><code>beforeCreat</code> 创建之前</p><p><code>created</code> 已被创建（用来发起 ajax 请求）</p><p><code>beforeMount</code> 被渲染之前</p><p><code>mounted</code> 已被渲染（可以操作 dom）</p><p>组件运行阶段</p><p><code>beforeUpdate</code> 运行之前</p><p><code>updated</code> 已被运行（拿到最新的数据）</p><p>组件销毁阶段</p><p><code>beforeDestory</code> 销毁之前</p><p><code>destoryed</code> 已被销毁</p><h3 id="组件之间的数据共享" tabindex="-1">组件之间的数据共享 <a class="header-anchor" href="#组件之间的数据共享" aria-label="Permalink to &quot;组件之间的数据共享&quot;">​</a></h3><p>1、父向子组件数据传递，使用自定义属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;left&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;我是父组件&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">MySon</span><span style="color:#B31D28;font-style:italic;"> :msg</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;message&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">MySon</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import MySon from &#39;@/components/MySon&#39;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Father&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  components: { MySon },</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#6F42C1;">      message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;我是父组件给子组件的消息&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件Son</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;父组件向count子组件传的值：{{msg}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Son&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  props:{</span></span>
<span class="line"><span style="color:#24292E;">    msg:{</span></span>
<span class="line"><span style="color:#24292E;">      type:String</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>2、子组件向父组件传数据，使用自定义事件 <code>this.$emit(&#39;change&#39;,this,count)</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;我是父组件 子组件传的值是{{num}} &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">MySon</span><span style="color:#B31D28;font-style:italic;"> @change</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;changeNumber&quot;</span><span style="color:#24292E;">&gt;+1&lt;/</span><span style="color:#005CC5;">MySon</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import MySon from &#39;@/components/MySon&#39;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Father&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  components: { MySon },</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#6F42C1;">      num</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#6A737D;">// 用于接收子组件的值</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">   methods:{</span></span>
<span class="line"><span style="color:#6F42C1;">    changeNumber</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子组件</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;我是子组件&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;send&quot;</span><span style="color:#24292E;">&gt;传值&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Son&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#6F42C1;">      number</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  methods:{</span></span>
<span class="line"><span style="color:#6F42C1;">    send</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#005CC5;">      this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.number)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">scrip</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>3、兄弟组件之间的数据共享是 EventBus</p><p>创建一个 <code>eventBus.js</code> 模块，并向外共享实例 vue</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在发送方使用 methods 调用 bus.$emit 方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;share&quot;</span><span style="color:#24292E;">&gt;点击把数据发送给right.vue&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import bus from &#39;../assets/eventBus&#39;;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">name: </span><span style="color:#032F62;">&quot;Left&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#6F42C1;">      brother</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;兄弟组件的信息&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  methods:{</span></span>
<span class="line"><span style="color:#6F42C1;">    share</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      bus.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;share&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.brother)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在接受方的 created 生命周期中调用 bus.$on 方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;收到的数据:{{str}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import bus from &#39;../assets/eventBus&#39;;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Right&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#6F42C1;">      str</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6F42C1;">  created</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    bus.$on(</span><span style="color:#032F62;">&#39;share&#39;</span><span style="color:#24292E;">,(val) =&gt; {</span></span>
<span class="line"><span style="color:#005CC5;">     this</span><span style="color:#24292E;">.str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="ref-引用" tabindex="-1">ref 引用 <a class="header-anchor" href="#ref-引用" aria-label="Permalink to &quot;ref 引用&quot;">​</a></h3><p>在不依赖 jquery 和操作 API 的情况下，获取 dom 元素</p><p>在每个 vue 组件的实例上，都包含一个$ref 对象</p><p>给要操作的 dom 加 ref 属性，在方法内使用 <code>this.$refs.属性名</code> 可以获取 dom</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> ref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ref1&quot;</span><span style="color:#24292E;">&gt;我是div标签&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#6F42C1;">  mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    this.$refs.ref1.style.color </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;red&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此方法同样可用以用在子组件上</p><p>如果某个组件是动态生成的，不能直接使用 ref 获取到 dom，要等 dom 被渲染完成才能获取到 dom，使用 <code>this.$nextTick()</code>函数，相当于一个延时函数</p><h3 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h3><p>动态切换组件的显示和隐藏</p><p>vue 提供了<code>&lt;component is=&#39;Left&#39;&gt;</code>标签使用组件，<code>is</code>的属性是需要渲染的组件</p><p>要渲染的组件可以通过键值对放在 data 中,通过 comName 声明 <code>comName:&#39;Left&#39;</code>，之后通过动态属性绑定到 is 上</p><p>在 component 外可以使用<code>&lt;keep-alive&gt;</code>标签将组件进行缓存，防止被销毁</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">keep-alive</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">component</span><span style="color:#B31D28;font-style:italic;"> :is</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;comName&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">keep-alive</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>keep-alive 有自己的生命周期</p><p>当组件被激活时，会自动触发组件的 <code>activated</code> 生命周期函数。</p><p>当组件被隐藏时，会自动触发组件的 <code>deactivated</code> 生命周期函数。</p><p>keep-alive 可以指定缓存的组件，通过 <code>include</code> 指定，如果不指定就缓存标签下的所有组件,也可以指定排除性 <code>exclude</code>，但不能和 <code>include</code> 同时使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">keep-alive</span><span style="color:#6F42C1;"> inclued</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Left&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">component</span><span style="color:#B31D28;font-style:italic;"> :is</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;comName&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">keep-alive</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>inclued 缓存的值可以在组件内部可以通过 <code>name</code> 声明组件名称，主要配合 keep-alive 缓存使用</p><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><p>插槽 Slot 可以将不确定的、希望用户指定的定义为插槽</p><h3 id="具名插槽" tabindex="-1">具名插槽 <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽&quot;">​</a></h3><p>声明一个插槽区,vue 官方规定每个 <code>slot</code> 插槽都要有一个 <code>name</code> 名称，如果没有 <code>name</code> 属性则 <code>name</code> 默认为 <code>default</code>，带有 name 的插槽为具名插槽</p><p>注意：需要指定插槽插入的位置要借助 <code>template</code> 标签或 <code>component</code> 标签,使用 <code>v-slot</code> 绑定插槽的名字</p><p><code>v-slot:</code>可简写为<code>#</code></p><p>子组件中可以有默认后备内容，当父组件有内容，会覆盖子组件的默认内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//在子组 Left 中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#6F42C1;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;">&gt;默认内容&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//在父组件中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#B31D28;font-style:italic;"> #default</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;123&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>最后 left 会渲染出 123</p><h3 id="作用域插槽" tabindex="-1">作用域插槽 <a class="header-anchor" href="#作用域插槽" aria-label="Permalink to &quot;作用域插槽&quot;">​</a></h3><p>在封装组件时为预留的插槽可以提供其他属性，通过<code>#插槽名=&#39;scope&#39;</code>接收 这种插槽叫作用域插槽</p><p>通过 <code>slot-scope</code>.其他属性可以访问这个属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#6F42C1;"> slot</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#6F42C1;"> slot-scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slotProps&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ slotProps.msg }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//在子组 Left 中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#6F42C1;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#6F42C1;"> msg</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#B31D28;font-style:italic;"> :user</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;userInfo&#39;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//在父组件中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#B31D28;font-style:italic;"> #default</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;{msg , user}&quot;</span><span style="color:#24292E;"> &gt; // scope = &quot;{msg , user}&quot;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;123&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{user}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{msg}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="自定义指令" tabindex="-1">自定义指令 <a class="header-anchor" href="#自定义指令" aria-label="Permalink to &quot;自定义指令&quot;">​</a></h2><h3 id="私有自定义指令" tabindex="-1">私有自定义指令 <a class="header-anchor" href="#私有自定义指令" aria-label="Permalink to &quot;私有自定义指令&quot;">​</a></h3><p>在组件中通过 <code>directives</code> 节点声明自定义指令，如 <code>v-color</code> 指令，指令内的 bind 函数会自动触发</p><p><code>v-color=&#39;red&#39;</code>，通过传值传的方式传给 color，在 bind 内通过 binding 接收</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  color</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">    bind</span><span style="color:#24292E;">(el , binding) {</span></span>
<span class="line"><span style="color:#24292E;">      el.style.color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bindind.value</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>bind</code> 只会在第一次被绑定的时候自动触发所以需要 <code>updeate</code> 函数进行更新</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  color</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">    bind</span><span style="color:#24292E;">(el,binding){</span></span>
<span class="line"><span style="color:#24292E;">      el.style.color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bindind.value</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#6F42C1;">    update</span><span style="color:#24292E;">(el,binding){</span></span>
<span class="line"><span style="color:#24292E;">      el.style.color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bindind.value</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果 bind 和 update 函数的内容相同，可以简写</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#6F42C1;">  color</span><span style="color:#24292E;">(el,binding){</span></span>
<span class="line"><span style="color:#24292E;">    el.style.color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bindind.value</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="全局自定义指令" tabindex="-1">全局自定义指令 <a class="header-anchor" href="#全局自定义指令" aria-label="Permalink to &quot;全局自定义指令&quot;">​</a></h3><p>在 main.js 使用 <code>Vue.directive()</code>声明,和过滤器 <code>filter</code> 一样，在实际开发中多用全局的自定义过滤器和指令</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">binding</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  el.style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bindind.value</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="防抖指令" tabindex="-1">防抖指令 <a class="header-anchor" href="#防抖指令" aria-label="Permalink to &quot;防抖指令&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 1.设置 v-debounce 自定义指令</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;debounce&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#6F42C1;">  bind</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">binding</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> debounceTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> binding.value; </span><span style="color:#6A737D;">// 防抖时间</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">debounceTime) { </span><span style="color:#6A737D;">// 用户若不设置防抖时间，则默认 2s</span></span>
<span class="line"><span style="color:#24292E;">      debounceTime </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> cbFun;</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cbFun) { </span><span style="color:#6A737D;">// 第一次执行</span></span>
<span class="line"><span style="color:#24292E;">        cbFun </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cbFun </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }, debounceTime);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 阻止事件冒泡并且阻止该元素上同事件类型的监听器被触发</span></span>
<span class="line"><span style="color:#24292E;">        event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">stopImmediatePropagation</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 2.为 button 标签设置 v-debounce 自定义指令</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;sayHello&quot;</span><span style="color:#6F42C1;"> v-debounce</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;1000&#39;</span><span style="color:#24292E;">&gt;提交&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="图片懒加载指令" tabindex="-1">图片懒加载指令 <a class="header-anchor" href="#图片懒加载指令" aria-label="Permalink to &quot;图片懒加载指令&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> LazyLoad</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // install 方法</span></span>
<span class="line"><span style="color:#6F42C1;">  install</span><span style="color:#24292E;">(</span><span style="color:#E36209;">Vue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 代替图片的 loading 图</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> defaultSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.default</span></span>
<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lazy&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#6F42C1;">      bind</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">binding</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        LazyLoad.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(el, binding.value, defaultSrc)</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#6F42C1;">      inserted</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 兼容处理</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;IntersectionObserver&#39;</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> window) {</span></span>
<span class="line"><span style="color:#24292E;">          LazyLoad.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          LazyLoad.</span><span style="color:#6F42C1;">listenerScroll</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 初始化</span></span>
<span class="line"><span style="color:#6F42C1;">  init</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">def</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // data-src 储存真实 src</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data-src&#39;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#6A737D;">    // 设置 src 为 loading 图</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">, def)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 利用 IntersectionObserver 监听 el</span></span>
<span class="line"><span style="color:#6F42C1;">  observe</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> io </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> IntersectionObserver</span><span style="color:#24292E;">(</span><span style="color:#E36209;">entries</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      let</span><span style="color:#24292E;"> realSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.dataset.src</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (entries[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].isIntersecting) {</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (realSrc) {</span></span>
<span class="line"><span style="color:#24292E;">          el.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realSrc</span></span>
<span class="line"><span style="color:#24292E;">          el.</span><span style="color:#6F42C1;">removeAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data-src&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    io.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 监听 scroll 事件</span></span>
<span class="line"><span style="color:#6F42C1;">  listenerScroll</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LazyLoad.</span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(LazyLoad.load, </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    LazyLoad.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;scroll&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">      handler</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 加载真实图片</span></span>
<span class="line"><span style="color:#6F42C1;">  load</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> windowHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientHeight</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> elTop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">().top</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> elBtm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">().bottom</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> realSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.dataset.src</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (elTop </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> windowHeight </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 0</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> elBtm </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (realSrc) {</span></span>
<span class="line"><span style="color:#24292E;">        el.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realSrc</span></span>
<span class="line"><span style="color:#24292E;">        el.</span><span style="color:#6F42C1;">removeAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data-src&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 节流</span></span>
<span class="line"><span style="color:#6F42C1;">  throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> timer</span></span>
<span class="line"><span style="color:#D73A49;">    let</span><span style="color:#24292E;"> prevTime</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      let</span><span style="color:#24292E;"> currTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">      let</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> this</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">prevTime) prevTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currTime</span></span>
<span class="line"><span style="color:#6F42C1;">      clearTimeout</span><span style="color:#24292E;">(timer)</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (currTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> prevTime </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> delay) {</span></span>
<span class="line"><span style="color:#24292E;">        prevTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currTime</span></span>
<span class="line"><span style="color:#24292E;">        fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#6F42C1;">        clearTimeout</span><span style="color:#24292E;">(timer)</span></span>
<span class="line"><span style="color:#D73A49;">        return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      timer </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        prevTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        timer </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">        fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args)</span></span>
<span class="line"><span style="color:#24292E;">      }, delay)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> LazyLoad</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h3 id="一键-copy-指令" tabindex="-1">一键 Copy 指令 <a class="header-anchor" href="#一键-copy-指令" aria-label="Permalink to &quot;一键 Copy 指令&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Message } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;ant-design-vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> vCopy</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置</span></span>
<span class="line"><span style="color:#6A737D;">  // el: 作用的 dom 对象</span></span>
<span class="line"><span style="color:#6A737D;">  // value: 传给指令的值，也就是我们要 copy 的值</span></span>
<span class="line"><span style="color:#6F42C1;">  bind</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    el.$value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#6A737D;">// 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">handler</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">el.$value) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 值为空的时候，给出提示</span></span>
<span class="line"><span style="color:#24292E;">        Message.</span><span style="color:#6F42C1;">warning</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;无复制内容&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">        return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#6A737D;">      // 动态创建 textarea 标签</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> textarea</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;textarea&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">      // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span>
<span class="line"><span style="color:#24292E;">      textarea.readOnly </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;readonly&#39;</span></span>
<span class="line"><span style="color:#24292E;">      textarea.style.position </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;absolute&#39;</span></span>
<span class="line"><span style="color:#24292E;">      textarea.style.left </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;-9999px&#39;</span></span>
<span class="line"><span style="color:#6A737D;">      // 将要 copy 的值赋给 textarea 标签的 value 属性</span></span>
<span class="line"><span style="color:#24292E;">      textarea.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.$value</span></span>
<span class="line"><span style="color:#6A737D;">      // 将 textarea 插入到 body 中</span></span>
<span class="line"><span style="color:#24292E;">      document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(textarea)</span></span>
<span class="line"><span style="color:#6A737D;">      // 选中值并复制</span></span>
<span class="line"><span style="color:#24292E;">      textarea.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">      // textarea.setSelectionRange(0, textarea.value.length);</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> result</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">execCommand</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Copy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (result) {</span></span>
<span class="line"><span style="color:#24292E;">        Message.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;复制成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(textarea)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 绑定点击事件，就是所谓的一键 copy 啦</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, el.handler)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 当传进来的值更新的时候触发</span></span>
<span class="line"><span style="color:#6F42C1;">  componentUpdated</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    el.$value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 指令与元素解绑的时候，移除事件绑定</span></span>
<span class="line"><span style="color:#6F42C1;">  unbind</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, el.handler)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> vCopy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>关于自定义指令还有很多应用场景，如：拖拽指令、页面水印、权限校验等等应用场景</p><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h2><p><code>router</code>就是地址和组件的对应关系</p><p><code>hash</code> 地址本质是<strong>锚链接</strong>，通过 a 标签指向 ID 访问，但会产生浏览历史即浏览器的前进后退可用，在 url 内#号和后面的地址为 hash 地址</p><p>用 <code>onhashchange</code> 事件可以监听路由发生变化</p><p>vue-route 是 vue.js 官方给出的路由解决方案</p><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p>安装 vue-route <code>npm i vue-route -S</code></p><p>在 src 下创建一个 router 文件夹 并创建 index.js 内进行路由配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> VueRoute </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//导入需要的组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Home form </span><span style="color:#032F62;">&#39;@/components/Home.Vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//调用 Vue.use（），把 VueRouter 安装为 Vue 插件</span></span>
<span class="line"><span style="color:#24292E;">Vue.use(VueRouter)</span></span>
<span class="line"><span style="color:#6A737D;">//创建路由实例,并进行配置</span></span>
<span class="line"><span style="color:#24292E;">const router = new VueRouter(</span></span>
<span class="line"><span style="color:#6A737D;">  //定义 hash 地址和组件之间的对应关系</span></span>
<span class="line"><span style="color:#24292E;">  routes:[</span></span>
<span class="line"><span style="color:#6A737D;">    //路由规则</span></span>
<span class="line"><span style="color:#24292E;">    {path:&#39;/home&#39;,component: Home}</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6A737D;">//导出 router</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在 Vue 中要使用路由需要在 main.js 内进行挂载</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//在导入模块的时候，如果是给定的是文件夹，则默认导入文件夹的 index.js</span></span>
<span class="line"><span style="color:#6A737D;">//在 new Vue 中挂载 router</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> @/router/index.js</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  router,</span></span>
<span class="line"><span style="color:#24292E;">  store,</span></span>
<span class="line"><span style="color:#6F42C1;">  render</span><span style="color:#24292E;">: </span><span style="color:#E36209;">h</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#6F42C1;"> h</span><span style="color:#24292E;">(App)</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用 router-view 组件，本质是一个占位符</p><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><p>使用 router-link to=&#39;xxx&#39;代替 a 标签</p><p><code>&lt;router-link to=&quot;/home&quot;&gt;&lt;/router-link&gt;</code></p><h3 id="路由重定向" tabindex="-1">路由重定向 <a class="header-anchor" href="#路由重定向" aria-label="Permalink to &quot;路由重定向&quot;">​</a></h3><p>使用 redirect 属性重定向路由</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> router</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> VueRouter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  routes:[</span></span>
<span class="line"><span style="color:#6A737D;">    //路由重定向</span></span>
<span class="line"><span style="color:#24292E;">    {path:</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,redirect:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">    //路由规则</span></span>
<span class="line"><span style="color:#24292E;">    {path:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,component:Home}</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-label="Permalink to &quot;嵌套路由&quot;">​</a></h3><p>即子组件中的路由，在子组件中使用 router-link 添加路由并使用 router-view 占位符</p><p><code>&lt;router-link to=&quot;/home/tab1&quot;&gt;&lt;/router-link&gt;</code></p><p>在 router 的 index.js 内对应的组件添加 children 属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> router</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> VueRouter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  routes:[</span></span>
<span class="line"><span style="color:#6A737D;">      //路由重定向</span></span>
<span class="line"><span style="color:#24292E;">      {path:</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,redirect:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">      //路由规则</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        component:Home,</span></span>
<span class="line"><span style="color:#24292E;">        children: [</span></span>
<span class="line"><span style="color:#24292E;">          {path:</span><span style="color:#032F62;">&#39;tab1&#39;</span><span style="color:#24292E;">,component:Tab1}</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果子组件中有一个 path 为空字符串，则它是默认子路由</p><h3 id="动态路由匹配" tabindex="-1">动态路由匹配 <a class="header-anchor" href="#动态路由匹配" aria-label="Permalink to &quot;动态路由匹配&quot;">​</a></h3><p>在路由规则内可以使用英文的<code>:</code>来定义路由的参数</p><p><code>{path:&#39;/home/:id&#39;,component:&#39;Home&#39;}</code></p><p>在对应组件中使用 <code>this.$route.params.id</code> 可以访问到对应参数</p><p>通过 <code>this.$route.query</code> 可以访问带<code>?</code>传的查询参数</p><p>通过 <code>this.$route</code> 的 path 可以访问路径，通过 <code>fullpath</code> 可以访问完整路径</p><p>或在路由中开启 props 传参</p><p><code>{path:&#39;/home/:id&#39;,component:&#39;Home&#39;,props:true}</code></p><p>就可以在 props 内拿到 id</p><h3 id="常见用法" tabindex="-1">常见用法 <a class="header-anchor" href="#常见用法" aria-label="Permalink to &quot;常见用法&quot;">​</a></h3><p>vue 常用的编程式导航<code>this.$router</code></p><p><code>this.$router.path(&#39;hash 地址&#39;)</code></p><p>跳转到对应 hash 地址，并增加一条历史记录</p><p><code>this.$router.replace(&#39;hash 地址&#39;)</code></p><p>跳转到对应 hash 地址，不增加历史记录</p><p><code>this.$router.go(数值 n)</code></p><p>数值为正代表前进，为负代表后退，一般只会前进和后退一层</p><p>前进 <code>this.$router.forward()</code></p><p>后退 <code>this.$router.back()</code></p><h3 id="vue-路由传参" tabindex="-1">vue 路由传参 <a class="header-anchor" href="#vue-路由传参" aria-label="Permalink to &quot;vue 路由传参&quot;">​</a></h3><p>项目中很多情况下都需要进行路由之间的传值，可以使用 <code>sessionstorage/localstorage/cookie</code> 进行离线缓存存储也可以，用 <code>vuex</code> 也可以，如果只是简单的传值可以使用 <code>vue</code> 自带的路由传参方法</p><p>参考官方文档：<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html" target="_blank" rel="noreferrer">https://router.vuejs.org/zh/guide/essentials/passing-props.html</a></p><p>想要实现点击当前页的某个按钮或链接跳转到另外一个页面去，并将某个参数带过去</p><h4 id="页面刷新数据不会丢失" tabindex="-1">页面刷新数据不会丢失 <a class="header-anchor" href="#页面刷新数据不会丢失" aria-label="Permalink to &quot;页面刷新数据不会丢失&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#B31D28;font-style:italic;"> @click</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &quot;insurance(123)&quot;</span><span style="color:#24292E;">&gt;我要传参&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">methods：{</span></span>
<span class="line"><span style="color:#6F42C1;">  insurance</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#6A737D;">    //直接调用$router.push 实现携带参数的跳转</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">\`/particulars/\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 需要对应路由配置如下：可以看出需要在 path 中添加/:id 来对应 $router.push 中 path 携带的参数。</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/particulars/:id&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;particulars&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">  component</span><span style="color:#24292E;">: particulars</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>目标页面获取参数方法：<code>this.$route.params.id</code></p><h4 id="页面刷新数据会丢失" tabindex="-1">页面刷新数据会丢失 <a class="header-anchor" href="#页面刷新数据会丢失" aria-label="Permalink to &quot;页面刷新数据会丢失&quot;">​</a></h4><p>类似 post 请求 通过路由属性中的 <code>name</code> 来确定匹配的路由，通过 <code>params</code> 来传递参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">methods：{</span></span>
<span class="line"><span style="color:#6F42C1;">  insurance</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;particulars&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      params: {</span></span>
<span class="line"><span style="color:#24292E;">        id: id</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对应路由配置正常配置即可</p><p>目标页面获取参数方法：<code>this.$route.params.id</code></p><h4 id="query-传参" tabindex="-1">query 传参 <a class="header-anchor" href="#query-传参" aria-label="Permalink to &quot;query 传参&quot;">​</a></h4><p>参数会显示在 url 后面以<code>?</code>拼接的形式，类似 get 请求</p><p>使用 path 来匹配路由，然后通过 query 来传递参数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">methods：{</span></span>
<span class="line"><span style="color:#6F42C1;">  insurance</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">&#39;/particulars&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      query: {</span></span>
<span class="line"><span style="color:#24292E;">        id: id</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对应路由配置正常配置即可</p><p>目标页面获取参数方法：&#39;this.$route.query.id&#39;</p><h3 id="导航守卫" tabindex="-1">导航守卫 <a class="header-anchor" href="#导航守卫" aria-label="Permalink to &quot;导航守卫&quot;">​</a></h3><p>导航守卫可以控制路由的访问权限</p><p>每次发路由跳转时，通过 <code>router.beforeEach(fn)</code>调用一个回调函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> router</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> VueRouter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  routes:[</span></span>
<span class="line"><span style="color:#6A737D;">    //路由重定向</span></span>
<span class="line"><span style="color:#24292E;">    {path:</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,redirect:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">    //路由规则</span></span>
<span class="line"><span style="color:#24292E;">    {path:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,component:Home,</span></span>
<span class="line"><span style="color:#24292E;">    children: [</span></span>
<span class="line"><span style="color:#24292E;">      {path:</span><span style="color:#032F62;">&#39;tab1&#39;</span><span style="color:#24292E;">,component:Tab1}</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,</span><span style="color:#E36209;">from</span><span style="color:#24292E;">,</span><span style="color:#E36209;">next</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#6A737D;">  //to 是要去的路由</span></span>
<span class="line"><span style="color:#6A737D;">  //from 是要离开的路由</span></span>
<span class="line"><span style="color:#6A737D;">  //next()是放行函数</span></span>
<span class="line"><span style="color:#6A737D;">  //next(&#39;/login&#39;)hash 地址强制跳转</span></span>
<span class="line"><span style="color:#6A737D;">  //next(false)禁止跳转</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;">(to.path</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&#39;/main&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#6A737D;">    //访问的是主页</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> token</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> localStroage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;token&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">    //查看是否登录即是否有 token</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;">(token){</span></span>
<span class="line"><span style="color:#6F42C1;">      next</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//如果有直接放行</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">      next</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//没有就强制跳转到登录</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">    next</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//访问的不是主页，直接放行</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>常见 vuter 报错解决 在 eslintrc.js 的 rules 内新增规则并重启服务器 <code>&#39;space-before-function-paren&#39;:[&#39;error&#39;,&#39;never&#39;]</code></p><p>vue.config.js<a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noreferrer">api 文档</a></p><p>vue.config.js 内配置跨域</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  publicPath: </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    proxy: {</span></span>
<span class="line"><span style="color:#032F62;">      &#39;/api&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://localhost:5000&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 要请求的 API</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否开启跨域</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#032F62;">          &#39;^/api&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#6A737D;"> // 重写路由</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,255)]))}const d=n(e,[["render",o]]);export{u as __pageData,d as default};
