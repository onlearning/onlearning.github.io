import{_ as a,c as n,a2 as p,o as e}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"JS 基础","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/JS基础.md","filePath":"src/base/JS基础.md","lastUpdated":1713863841000}'),o={name:"src/base/JS基础.md"};function l(c,s,r,t,d,i){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="js-基础" tabindex="-1">JS 基础 <a class="header-anchor" href="#js-基础" aria-label="Permalink to &quot;JS 基础&quot;">​</a></h1><p>js 由 ECMAScript+Bom+Dom 组成 从上而下执行</p><p>ECMAScript ：规定 JS 的基础语法</p><p>DOM:文档对象模型</p><p>BOM:浏览器对象模型</p><p>可以写在行内、内嵌、和外部</p><p>js 推荐使用单引号</p><p>单行注释 ctrl+/</p><p>多行注释 shift-alt+a</p><p>输出在控制台 console.log</p><p>alert 弹窗</p><p>prompt 输入框</p><p>document.write 输出在页面上</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>使用 var 声明变量，等于号看做赋值，变量就是一个容器，在内存中的一片空间</p><p>可以同时声明多个变量，用逗号隔开</p><p>变量可以只声明不赋值</p><p>变量命名规范：</p><p>由数字、字母、下划线和美元符号组成</p><p>大小写严格</p><p>不能以数字开头</p><p>不能以关键字和保留字命名</p><p>遵守驼峰命名法</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基础数据类型" tabindex="-1">基础数据类型 <a class="header-anchor" href="#基础数据类型" aria-label="Permalink to &quot;基础数据类型&quot;">​</a></h3><p>bit(位)：保存 0 或 1 1 位</p><p>Byte(字节)：1B=8b</p><p>KB(千字节)：1Kb=1024B</p><p>MB(兆字节)：1MB=1024KB</p><p>GB(吉字节)：1GB=1024MB</p><p>TB(太字节)：1TB=1024GB</p><p>java 是弱类型语言，在运行过程中根据等号右边的值来确定会确认数据类型，它还是动态语言，数据类型可变，可以是 int 类型也可以是字符串类型</p><h3 id="简单数据类型" tabindex="-1">简单数据类型 <a class="header-anchor" href="#简单数据类型" aria-label="Permalink to &quot;简单数据类型&quot;">​</a></h3><p>js 内有五个基本数据类型，String、Number、Boolea、underfind、null</p><p>1、数值型 Number 默认为 0，可以是整数也可以是小数</p><p>除了十进制还有二进制，八进制(以 0 开头)，16 进制(以 0x 开头)</p><p>数字型的最大值(Numnber.MAX_VALUE)</p><p>数字型的最小值(Numnber.MIN_VALUE)</p><p>infinity(无穷大)</p><p>-infinity(无穷小)</p><p><code>NAN</code> 表明数据为非数字类型</p><p><code>isNAN()</code>可以判断是否为数字，如果是数字返回 false，如果不是返回 true</p><p>2、字符串型 string，可以用双引号还可以是单引号，如果引号嵌套可以外双内单或外单内双</p><p>反斜杠<code>\\</code>为字符串转义字符，使用需在引号内</p><p><code>\\n</code> 换行</p><p><code>\\t</code> 缩进</p><p><code>\\b</code> 空格</p><p>通过 lenth 可以访问字符串长度</p><p>通过加号可以拼接字符串 <code>s + r = sr</code></p><p>字符串具有不可变性，即使重新声明新的字符串，也只是改变地址</p><p>所以<strong>字符串的方法都会返回新的字符串</strong></p><p><code>indexof()</code>查询字符的位置，括号内可以加起始的位置</p><p><code>lastindexof()</code>从后开始查询字符满足条件的位置</p><p><code>charAt(index)</code>返回指定位置的字符串</p><p><code>charCodeAt(index)</code>获取指定位置字符的 ASCII 编码</p><p>(ASSCII 编码主要可以判断用户键盘输入的键)</p><p><code>str[index]</code>返回指定索引的字符(h5 新增，ie8+支持)</p><p><code>concat(str1,str2,str3)</code>相当于+号拼接字符串</p><p><code>substr(strart，length)</code>从 start 开始，取 length 长的字符串</p><p><code>slice(start，end)</code>从 start 开始，end 取不到</p><p><code>substring(start，end)</code>从 start 开始，end 取不到</p><p><code>replace(被替换的字符，替换的字符)</code>只会替换第一个字符</p><p><code>split()</code>括号内加分割符(取决于字符串的分隔符)，可将字符转换换为数组</p><p><code>toUpperCase()</code> 大写</p><p><code>toLowerCase()</code> 小写</p><p>3、Bollean 只有 false，true，默认为 false</p><p>false 参与运算为 0，true 参与运算为 1</p><p>4、underfind 为字符串，进行运算相对于一个字符串</p><p>5、null 为空值，与数字进行运算为数字本身</p><h3 id="复杂数据类型" tabindex="-1">复杂数据类型 <a class="header-anchor" href="#复杂数据类型" aria-label="Permalink to &quot;复杂数据类型&quot;">​</a></h3><p>复杂数据类型：引用类型</p><p>使用 new 关键字创建，比如 <code>Object</code>、<code>Array</code> <code>function</code>等</p><p>简单数据类型放在栈内，存放的是值</p><p>复杂数据类型放在堆内，首先在栈内存放地址(16 进制)，地址指向堆内的数据</p><p>简单数据类型传参，将值传递给形参，无论方法内的形参如何修改都不影响外部变量</p><p>复杂数据类型传参，形参和实参都是同一个堆地址，会操作同一个变量从而会影响外部变量</p><h3 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h3><p>typeof 可以返回数据类型 typeof+空格+变量</p><p>prompt 取过来的值是字符串 <code>prompt()</code></p><p>控制台中不同颜色也能判断数据类型，数字为蓝色，字符串为黑色，underfind 和 null 为灰色</p><p>1、转换为字符串</p><p>变量.toString <code>str.toString()</code></p><p>强制类型转换 <code>String(变量)</code></p><p>通过加号拼接，可以是一个空格(隐式转换)</p><p>2、转换为数字型</p><p><code>parseInt(变量)</code>如果是小数，则省略小数部分，如果数字带字符串只输出整数部分</p><p><code>parseFloat(变量)</code>转换为小数</p><p><code>Number(变量)</code>强制类型转换</p><p>隐式转换(<code>- * /</code>)运用算术运算转换(不用+号是因为加号会变成字符串拼接)</p><p>3、转换为布尔值</p><p><code>Bollean() </code> 代表空的、否定的、0 会转换为 false，其他为 true</p><h2 id="js-运算符" tabindex="-1">JS 运算符 <a class="header-anchor" href="#js-运算符" aria-label="Permalink to &quot;JS 运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><p>加(<code>+</code>)减(<code>-</code>)乘(<code>*</code>)除(<code>/</code>)及取余(<code>%</code>)</p><h3 id="递增和递减" tabindex="-1">递增和递减 <a class="header-anchor" href="#递增和递减" aria-label="Permalink to &quot;递增和递减&quot;">​</a></h3><p><code>++</code>和<code>--</code>，分为前置(先自加，后返回值)和后置(先返回值，后自加)</p><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><p><code>&lt;</code> 小于</p><p><code>&gt;</code> 大于</p><p><code>&lt;=</code> 小于等于</p><p><code>&gt;=</code> 大于等于</p><p><code>!=</code> 不等于</p><p><code>==</code> (存在隐式转换 字符串转换为数字 1 和&#39;1&#39;会返回 true)</p><p><code>===</code>全等</p><p><code>!==</code> 全不等</p><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><p><code>&amp;&amp;</code> 与运算符、一假即假</p><p><code>||</code> 或运算符、一真即真</p><p><code>!</code> 非运算符</p><p>逻辑与短路，即有一个确定的值就不进行运算，返回第二个值，如果第一个为假就返回第一个值</p><p><code>123 &amp;&amp; 456</code> 因为第一个是确定的，返回 456</p><p><code>0 &amp;&amp; 456</code> 第一个是假，所以返回 0</p><p><code>0 &amp;&amp; 1 &amp;&amp; 1+2 </code>第一个是假，后面不参与运算，所以返回 0</p><p>逻辑非短路，有一个真的值就返回那个真的值</p><p><code>123||456</code> 返回 123</p><p><code>0||123</code> 返回 123</p><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p><code>=</code>把右边的值赋值给左边</p><p><code>+=</code> 本身和右边的值<code>+-*/</code>运算 如 <code>i=i+2</code>；可以写成 <code>i+=2</code>；</p><p><code>-=</code> 同理</p><p><code>++</code> <code>--</code> 和 <code>!</code> 为一元运算符，逻辑非优先级高</p><p>逻辑<code>&amp;&amp;</code>比逻辑<code>||</code>运算符优先级高</p><h3 id="条件表达式" tabindex="-1">条件表达式 <a class="header-anchor" href="#条件表达式" aria-label="Permalink to &quot;条件表达式&quot;">​</a></h3><p><code>?</code> 声明条件表达式也叫三元运算符 <code>条件 ? 表达式1 : 表达式2</code></p><p>条件为真返回表达式 1，为假返回表达式 2，可以通过条件表达式来简写 if</p><p><code>10 &gt; 5 ? true : false</code> 返回结果为 true</p><h2 id="js-流程控制" tabindex="-1">JS 流程控制 <a class="header-anchor" href="#js-流程控制" aria-label="Permalink to &quot;JS 流程控制&quot;">​</a></h2><p>1、顺序结构 从上往下，依次执行</p><p>2、分支结构(if 和 swich) 二选一执行，if + else</p><p>3、多分支语句</p><p>多选一执行 if + else if + ... + else 结尾</p><p>switch+case + break 以 default 结束(多用于固定的值来匹配)</p><p>注意：swich 是全等匹配，要匹配字符串需要加引号</p><p>4、循环结构</p><p>for 循环</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">, a &lt; 10, a++ ){</span></span>
<span class="line"><span style="color:#6A737D;">  // 第一个参数为初始化变量 第二个参数为条件表达式</span></span>
<span class="line"><span style="color:#6A737D;">  // 第三参数为操作表达式(为每次循环最后执行的代码)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>嵌套循环 如乘法表</p><p>外层循环一次，里层循环全部，外层控制行数，里层控制列数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (int i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (int j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &quot;*&quot;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> j);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>while 循环</p><p><code>while(条件表达式){}</code>满足条件表达式才执行，要有限制防止出现死循环</p><p><code>do while</code> 循环，至少执行一次，不满足条件退出循环</p><h2 id="js-数组" tabindex="-1">JS 数组 <a class="header-anchor" href="#js-数组" aria-label="Permalink to &quot;JS 数组&quot;">​</a></h2><p>1.用 new Array()声明，如果为空则是一个空的数组，如果有一个数字则是数组的长度，如果有两个数字则是这个数组(用逗号隔开) <code>const arr = new Array()</code></p><p>2.用中括号声明，用逗号分隔每一个数组元素 <code>const arr = []</code></p><p>通过 length 访问数组下标</p><p>可以修改 length 长度来新增数组元素 <code>arr.length = 7</code></p><p>也可以修改索引号，如果没有数组的下标，会新增，如果有的下标，会修改数组元素</p><p>检测对象是否为数组</p><p>使用 <code>instanceof Array</code> 来判断</p><p>使用 <code>Array.isArray(数组名)</code>H5 新增的，IE9 以上支持</p><h3 id="数组常用方法" tabindex="-1">数组常用方法 <a class="header-anchor" href="#数组常用方法" aria-label="Permalink to &quot;数组常用方法&quot;">​</a></h3><p><code>push()</code>增加数组元素，增加在最后面，push 完返回新数组的长度</p><p><code>unshift()</code>在数组最前面添加元素</p><p><code>pop()</code>删除数组最后一个元素</p><p><code>shift()</code>删除数组第一个元素</p><p><code>reserve()</code>翻转数组</p><p><code>sort()</code>数组排序，默认从小到大，只针对个位数</p><p>如果要比较多位数需要借助函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">，</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">​ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b </span><span style="color:#6A737D;">//升序</span></span>
<span class="line"><span style="color:#24292E;">​ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a </span><span style="color:#6A737D;">//降序</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>indexof(条件)</code> 返回数组第一个满足条件的索引，找不到为-1</p><p><code>lastindexof(条件) </code>返回数组元素最后一个满足条件的索引</p><h3 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h3><p>有一个旧数组和一个空的新数组，拿旧数组的元素去查询新数组，如果没有，返回-1，存入新数组，如果有，则不存</p><p>在 es6 中数组去重 <code>const newArr = [...new Set(arr)]</code>，本质是以下写法(定义：新数据结构 Set，类似于数组，但成员值不重复。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Set</span><span style="color:#24292E;">(arr))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;NaN&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, {}, {}]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">(arr))</span></span>
<span class="line"><span style="color:#6A737D;">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {}, {}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="将数组转换为字符串" tabindex="-1">将数组转换为字符串 <a class="header-anchor" href="#将数组转换为字符串" aria-label="Permalink to &quot;将数组转换为字符串&quot;">​</a></h3><p><code>数组名.toString</code></p><p><code>数组名.join()</code>，括号内可以添加任何分割符</p><p><code>concat()</code>将多个数组组合成一个新数组</p><p><code>slice()</code>按索引截取数组 slice 不改变原数组</p><p><code>splice()</code>删除数组 splice 改变原数组</p><h3 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">​</a></h3><p>明确需要交换的趟数为数组长度 eg：3、2、1，只需要两趟，又因为数组是从 0 开始，所以第一层 for 循环的次数小于长度-1 即可</p><p>明确交换的次数，因为每次都已经换好一个，所以可以少每趟一次，刚好趟数递增，所以第二层 for 循环的次数减 1 还要减去趟数 i</p><p>优化：为避免进行重复运算，可在第二层循环开始前给一个布尔值，假定为 false，只有进行交换才新定义为 true，否则 break 循环，输出结果(降低时间复杂度)。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> bubbleSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#D73A49;"> -</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 相邻元素两两对比</span></span>
<span class="line"><span style="color:#24292E;">        ;[arr[j], arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">], arr[j]] </span><span style="color:#6A737D;">// 元素交换</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 降低时间复杂度</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> bubbleSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    temp </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span><span style="color:#D73A49;"> -</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      if</span><span style="color:#24292E;"> (arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j]</span></span>
<span class="line"><span style="color:#24292E;">        arr[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        arr[j </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp</span></span>
<span class="line"><span style="color:#24292E;">        lastIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果这一轮没有交换元素，说明数组已经排序好了</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> lastIndex) {</span></span>
<span class="line"><span style="color:#D73A49;">      break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 示例使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> arr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Original array: &#39;</span><span style="color:#24292E;">, arr)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Sorted array: &#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">bubbleSort</span><span style="color:#24292E;">(arr))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>continue：跳出当前次的循环，但继续下一次循环</p><p>break：结束循环</p><p>rteturn：退出循环，返回 return 的值 ，结束当前函数体的代码，如果当前函数体的 return 后还有代码，后面的代码将不执行</p><h2 id="js-函数" tabindex="-1">JS 函数 <a class="header-anchor" href="#js-函数" aria-label="Permalink to &quot;JS 函数&quot;">​</a></h2><p>封装一段可以被重复执行的代码，使用 function 声明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> 函数名(形参) {</span></span>
<span class="line"><span style="color:#6A737D;">  // ​ 函数体</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数名一般用动词，函数名不调用即不执行，括号内可传参</p><h3 id="函数的参数" tabindex="-1">函数的参数 <a class="header-anchor" href="#函数的参数" aria-label="Permalink to &quot;函数的参数&quot;">​</a></h3><p>参数分为形参和实参</p><p>在声明函数时函数是形参，调用函数时是实参</p><p>形参是接收实参的，可以看做不用声明的变量，多个参数用逗号隔开</p><p>如果实参的个数多余形参，多出的参数不参与计算</p><p>如果实参的个数少于形参，则有一个形参被定义为 undefined</p><p><strong>arguments</strong></p><p>当实参个数不确定时，使用 <code>arguments</code>，里面包含有所有的实参，本质是一个伪数组，具有 length 属性，但没有真数组的一些方法，push 等</p><p>只有函数才有 <code>arguments</code> 对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> add</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    len </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">  for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;"> arguments</span><span style="color:#24292E;">[i]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> sum</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="函数的返回值" tabindex="-1">函数的返回值 <a class="header-anchor" href="#函数的返回值" aria-label="Permalink to &quot;函数的返回值&quot;">​</a></h3><p>return+需要返回的结果</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> 函数名(){</span></span>
<span class="line"><span style="color:#6A737D;">// ​ 函数体</span></span>
<span class="line"><span style="color:#24292E;">​ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> xxx；</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>return 属于终止函数，在 return 后面的代码不会被执行</p><p>return 只能返回一个值，如果返回多个值以最后一个值为准</p><p>return 想返回多个值可以创建数组</p><p>如果函数没有 return 则返回 undefined</p><h3 id="函数调用" tabindex="-1">函数调用 <a class="header-anchor" href="#函数调用" aria-label="Permalink to &quot;函数调用&quot;">​</a></h3><p>函数之间可以相互调用</p><p>1、命名函数，使用 <code>function 函数名(){}</code>声明 通过函数名调用</p><p>2、匿名函数，使用 <code>var 变量名 = function(){}</code>；使用变量名调用</p><h2 id="js-作用域" tabindex="-1">JS 作用域 <a class="header-anchor" href="#js-作用域" aria-label="Permalink to &quot;JS 作用域&quot;">​</a></h2><p>作用域：是变量在某个范围起作用，未来提高程序可靠性并减少命名冲突。</p><p>作用域分为：全局作用域和局部作用域</p><p>全局作用域：在整个 script 标签或整个 js 起作用</p><p>局部作用域：在函数内部起作用</p><p>因此，在不同作用域下的变量分为全局变量和局部变量</p><p>函数的形参也是局部变量</p><p><strong>注意：在函数内部没有声明的变量也是全局变量</strong></p><p>全局变量只有在浏览器关闭才会销毁，比较占用内存</p><p>局部变量在代码块执行完毕就会销毁，比较节约内存</p><p><code>var</code> 用于声明全局变量，<code>let</code> 用于声明块级变量</p><p>es6 新增块级作用域，作用域存在于{}之间，比如 if 和 for</p><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>内部函数可以访问外部函数的变量，外部函数的变量相当于内部函数的全局变量，这个访问过程会一层一层向外，直到找到为止，找最近的变量。</p><h2 id="js-预解析" tabindex="-1">JS 预解析 <a class="header-anchor" href="#js-预解析" aria-label="Permalink to &quot;JS 预解析&quot;">​</a></h2><p>js 引擎运行 js 时会先进行预解析再执行代码</p><p>预解析会将变量名和函数提升至当前作用域的最前面，但不进行赋值和函数执行</p><p>所以可以先调用函数再声明函数</p><p>函数内部 <code>var a=b=c=9</code>，可以理解为 <code>var a=9，b=9,c=9</code> 相当于 a 是局部变量，bc 为全局变量</p><h2 id="js-对象" tabindex="-1">JS 对象 <a class="header-anchor" href="#js-对象" aria-label="Permalink to &quot;JS 对象&quot;">​</a></h2><p>对象是指具体的事物，对象由属性和方法组成</p><p>创建对象的三种方式：</p><p>1、利用字面量创建，使用{}声明；内部属性或方法用逗号隔开。注：[]是数组，()是运算优先级。</p><p>2、使用 new Object()；创建，添加属性和方法使用对象名.属性名(方法名)再加等号赋值。</p><p>3、利用构造函数创建对象，将有大量重复属性和方法的对象抽象出来封装起来</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> 构造函数名(){</span></span>
<span class="line"><span style="color:#24292E;">​ </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.属性</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">值；</span></span>
<span class="line"><span style="color:#24292E;">​ </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.方法</span><span style="color:#D73A49;">=function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过调用 <code>new 构造函数名()</code>； 调用构造函数返回一个对象</p><p>注意：构造函数名首字母需要大写、</p><p>调用对象和方法</p><p>调用对象属性使用对象名.属性名，还可以对象名[&#39;属性名&#39;]</p><p>调用方法使用 对象名.方法名</p><p>变量、属性、函数和方法</p><p>变量和属性都是用于存储数据的，只不过变量是单独声明的，属性是在对象内不需要声明但使用时需要通过对象调用</p><p>函数和方法都是实现某种功能的，只不过方法是存在于构造函数内，需要借用对象调用。</p><p>遍历对象</p><p>使用 <code>for (变量 in 对象){}</code></p><p><code>for(k in obj){}</code></p><p>输出属性名 对象[变量]</p><h3 id="js-内置对象" tabindex="-1">JS 内置对象 <a class="header-anchor" href="#js-内置对象" aria-label="Permalink to &quot;JS 内置对象&quot;">​</a></h3><p>对象分为自定义对象、内置对象、浏览器对象</p><h4 id="math-对象" tabindex="-1">Math 对象 <a class="header-anchor" href="#math-对象" aria-label="Permalink to &quot;Math 对象&quot;">​</a></h4><p>相当于一个封装的 Math 对象，可直接使用</p><p><code>Math.PI </code> 圆周率</p><p><code>Math.floor</code> 向下取整(1.9 为 1)</p><p><code>Math.ceil</code> 向上取整(1.1 为 2)</p><p><code>Math.round</code> 四舍五入取整</p><p><code>Math.random</code> 随机数，返回的数字范围从 0-1,1 取不到</p><p>运用 <code>Math.floor(Math.random()*(max-min+1))+min</code> 可以取两个数之间的随机整数并包含这两个数</p><h4 id="date-对象" tabindex="-1">Date 对象 <a class="header-anchor" href="#date-对象" aria-label="Permalink to &quot;Date 对象&quot;">​</a></h4><p>是一个构造函数，需要使用 new 关键字调用</p><p>如果没有参数返回当前系统时间</p><p>常用参数写法，数字型用逗号隔开，如 <code>var date1 = new Date(2021.7.8)</code></p><p>也可以是字符串写法，用-隔开 <code>var date = new Date(&#39;2021-7-8 8:8:8&#39;)</code></p><p>获取当前年份，<code>getFullYear()</code></p><p>获取月份，<code>getMonth()</code> 返回的是 0-11，需要+1</p><p>获取日期，<code>getDate()</code></p><p>获取星期几，<code>getDay()</code>，周日返回 0，如果想获得星期几可以创建一个数组，然后把这个获取的数字作为索引</p><p>获取时分秒如果想要小于 10 以 0 开头，则使用三元运算符如 <code>h &lt; 10 ? &#39;0&#39; + h : h</code></p><p>注： <code>Date.now()</code>为 H5 新增的，IE6 不支持</p><p><strong>倒计时</strong></p><p>用时间戳减去时间戳，推荐使用 day.js 库</p><p>首先返回当前时间的总豪秒数</p><p>然后返回需要倒计时的毫秒数</p><p>两者相减除 1000 为剩余秒数</p><p>之后将剩余秒数装换为天、时、分、秒(小于 10 用三元运算符拼接)</p><p>d = parseInt(总秒数/60/60/24)</p><p>h = parseInt(总秒数/60/60%24)</p><p>m = parseInt(总秒数/60%60)</p><p>s = parseInt(总秒数%60)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#6F42C1;"> showtime</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> nowtime </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">(), </span><span style="color:#6A737D;">//获取当前时间</span></span>
<span class="line"><span style="color:#24292E;">    endtime </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2020/8/8&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//定义结束时间</span></span>
<span class="line"><span style="color:#D73A49;">  var</span><span style="color:#24292E;"> lefttime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> endtime.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> nowtime.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">(), </span><span style="color:#6A737D;">//距离结束时间的毫秒数</span></span>
<span class="line"><span style="color:#24292E;">    leftd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(lefttime </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 60</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 60</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 24</span><span style="color:#24292E;">)), </span><span style="color:#6A737D;">//计算天数</span></span>
<span class="line"><span style="color:#24292E;">    lefth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((lefttime </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 60</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 60</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">%</span><span style="color:#005CC5;"> 24</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">//计算小时数</span></span>
<span class="line"><span style="color:#24292E;">    leftm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((lefttime </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;"> *</span><span style="color:#005CC5;"> 60</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">%</span><span style="color:#005CC5;"> 60</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">//计算分钟数</span></span>
<span class="line"><span style="color:#24292E;">    lefts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((lefttime </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 1000</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#005CC5;"> 60</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//计算秒数</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> leftd </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;天&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> lefth </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;:&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> leftm </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> &#39;:&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> lefts </span><span style="color:#6A737D;">//返回倒计时的字符串</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>调用倒计时，使用循环函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;showtime&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> showtime</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//反复执行函数本身</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="web-api" tabindex="-1">WEB API <a class="header-anchor" href="#web-api" aria-label="Permalink to &quot;WEB API&quot;">​</a></h2><p>API 是运用程序编程接口</p><p>WEB API 是浏览器的接口，主要操作 DOM 和 BOM</p><h3 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h3><p>文档对象模型(HTML 和 XML 的接口)</p><p>通过 DOM 可以改变网页的内容、结构和样式</p><p>文档：document</p><p>元素：element</p><p>节点：node</p><p>通过 <code>console.dir()</code> 可以返回元素对象，可以查看里面的属性和方法</p><p>获取元素：</p><p>1、<code>document.getElementById(id)</code>，通过 id 获取，大小写敏感，返回 element 对象</p><p>2、<code>document.getElementByTagName(tag)</code>，通过标签获取，返回对象集合，以伪数组形式存储，获取父元素指定的子元素，通过<code>父元素.getElementByTagName(tag)</code>获取</p><p>3、H5 新增方法获取：<code>document.getElementByClassName(class)</code>，通过类名获取，同样返回一个伪数组</p><p>4、<code>document.querySelector()</code>，返回指定选择器的第一个元素对象，常用</p><p>5、<code>document.querySelectorAll()</code>，返回指定选择器的所有对象集合，常用来获取 ul 内的所有 li</p><p>6、获取 body 元素 <code>document.body</code></p><p>7、获取 html 元素 <code>document.documentElement()</code></p><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>由事件源、事件类型和事件处理程序组成</p><p>事件源：事件被触发的对象</p><p>事件类型：如何触发</p><p>事件处理程序：通过函数赋值</p><p>所有事件都是修改属性，需要加引号</p><p><code>innerText</code> 修改文字，不识别 HTML 标签</p><p><code>innerHtml</code> 修改文字，且识别 HTML 标签，通过需要加标签要当成字符串来加(即标签外加引号)</p><p>禁用表单：<code>disable=true</code>，用 this 指向本身，常用来禁用按钮</p><p><code>classList</code> 返回元素的类名(ie10+支持)，和 className 不一样的地方是不会覆盖原来的类名</p><p><code>toggle</code> 属性切换类名，如果有就删除，没有就添加，做开关灯案例常用</p><p>通过 js 修改样式需要遵守驼峰命名，改完后变成行内样式，权重会变高</p><p>如果样式过多可以新建一个类，使用 <code>this.className=类名</code>，会覆盖原来的类名，如果想要保留，加上原来的类名即可：<code>this.className=旧类名 新类名</code></p><p>实现点击关闭是设置 <code>display</code> 属性</p><p>精灵图循环，首先每个精灵图的距离相同，然后让索引距离既可以循环出来</p><p><code>onfocus</code> 得到焦点</p><p><code>onblur</code> 失去焦点</p><p>如果有很多按钮都要进行点击事件，可以使用 for 循环，for 循环内还要使用排他思想，在遍历一次数组清除样式，最后更换成想要的样式(还可以使用冒泡思想，给父元素添加点击事件，点击到子元素会冒泡到父元素)</p><p>获取和设置属性值</p><p>获取元素属性值除了通过 <code>element.属性</code></p><p>还可以通过 <code>getAttribute(属性)</code>获取(主要获取自定义属性)</p><p>设置属性值除了通过 <code>element.属性=&#39;值&#39;</code></p><p>还可以通过 <code>setAttribute(属性, 值)</code>(主要设置自定义属性，轮播图和选项卡常用)</p><p>通过 <code>removeAttribute(属性)</code>可以删除属性</p><h3 id="h5-自定义属性" tabindex="-1">H5 自定义属性 <a class="header-anchor" href="#h5-自定义属性" aria-label="Permalink to &quot;H5 自定义属性&quot;">​</a></h3><p>自定义属性口语保存在页面中，而不用保存到数据库中</p><p>命名以 <code>data-属性名</code> <code>data-attr = &#39;value&#39;</code></p><p>H5 新增 dataset 属性，通过此属性可获取所有以 data 开头的自定义属性 <code>element.dataset.arrt</code></p><h3 id="节点操作" tabindex="-1">节点操作 <a class="header-anchor" href="#节点操作" aria-label="Permalink to &quot;节点操作&quot;">​</a></h3><p>元素节点 <code>nodeType</code> 是 1(主要操作元素节点)</p><p>属性节点 <code>nodeType</code> 是 2</p><p>文本节点 <code>nodeType</code> 是 3</p><p>父级节点 <code>parentNode</code> 通过<code>子节点.parentNode</code> 调用</p><p>子节点 <code>childNodes</code>，通过 for 循环(nodeType 判断)能遍历出元素节点</p><p>只获取元素节点，<code>父元素.children</code> 获取</p><p>获取第一个元素节点 <code>firstElementChil</code>d(IE9 兼容)</p><p>获取最后一个元素节点 <code>lastElementChild</code></p><p>实际开发中的写法获取第一个子元素节点 <code>children[0]</code></p><p>获取最后一个子元素 <code>ul.children[ul.children.length-1]</code>主要用来做下拉菜单</p><p><code>nextSibling</code> 获取下一个兄弟节点，包含元素节点和文本节点</p><p><code>previousSibing</code> 获取上一个兄弟节点</p><p>只获取元素节点(IE9 以上兼容)</p><p>下一个元素节点 <code>nextElementSibling</code></p><p>上一个元素节点 <code>previousElementSibing</code></p><p>创建节点(留言栏)，创建完需要添加<code>document.createElement(&#39;TagName&#39;)</code></p><p>添加节点(在元素后面添加)<code>node.appendChild(child)</code>eg：<code>ul.appendChild(li)</code></p><p>插入到指定元素的前面 <code>ul.insertBefore(li, ul.children[0])</code></p><p>删除节点 <code>node.removeChild(child)</code></p><p>阻止链接跳转 <code>href = &#39;javascript&#39;</code> 或 <code>href = &#39;javascript:void(0)&#39;</code></p><p>复制节点</p><p><code>node.cloneNode()</code>；如果括号为空或内容为 false，只复制标签，不复制内容</p><p>括号为 true 为完全复制，包括内容</p><p>创建元素的三种方式</p><p><code>document.write()</code>会导致页面重绘制</p><p><code>innerHTML</code>，结构复杂</p><p><code>document.creatElement</code>创建元素，结构清晰</p><p>不同浏览器，采取数组拼接，<code>innerHTML</code> 创建元素效率略高</p><h3 id="注册事件" tabindex="-1">注册事件 <a class="header-anchor" href="#注册事件" aria-label="Permalink to &quot;注册事件&quot;">​</a></h3><p>两种方式</p><p>1.以 <code>on</code> 开头的事件，但会有唯一性，后面的方法会覆盖前面的方法</p><p>2.<code>addEventListener(监听事件)</code>可以有多个事件处理程序，IE9 以上支持</p><p><code>对象.addEventListener(type, listener, useCapture)</code></p><p>type：事件类型：click，mouseover 等，需要加引号</p><p>listener：事件处理函数</p><p>userCapture：可选参数，默认为 false</p><p>eg：<code>对象.addEventListener(&#39;click&#39;, function(){})</code> 或对象.<code>addEventListener(&#39;click&#39;, fn)</code></p><h3 id="删除事件" tabindex="-1">删除事件 <a class="header-anchor" href="#删除事件" aria-label="Permalink to &quot;删除事件&quot;">​</a></h3><p>1、<code>对象.onclick=null</code> 可以删除</p><p>2、<code>对象.removeEventListener(type，listener)</code></p><p>eg：<code>对象.removeEventListener(&#39;click&#39;，fn)</code></p><h3 id="dom-事件流" tabindex="-1">DOM 事件流 <a class="header-anchor" href="#dom-事件流" aria-label="Permalink to &quot;DOM 事件流&quot;">​</a></h3><p>从顶层开始，从上到下为捕获节点 <code>document-html-body-div</code></p><p>从底层开始，从下往上为冒泡阶段 <code>div-body-hyml-document</code></p><p>事件流的方向决定了事件的执行顺序，默认的监听函数是冒泡阶段，所以更关注冒泡阶段</p><p>部分事件没有冒泡：<code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code></p><h3 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h3><p>首先事件对象要有事件才会存在，比如点击事件，鼠标浮动事件，即 <code>function(event){}</code></p><p>事件对象可以看作一个形参，它包含了事件的相关信息，别人鼠标的坐标，键盘的按键等</p><p>事件可以自己命名，常见事件的名字为 <code>event</code>、<code>e</code></p><p>事件对象不兼容 ie678，需要通过 window.e 访问</p><p><code>e.target</code> 返回的是触发事件的对象 和 this 的区别是，this 返回的绑定事件的对象</p><p><code>e.type</code> 返回的是事件类型，比如 <code>click</code></p><p>阻止事件不跳转，或点击按钮不提交 <code>e.preventDefault()</code>，常用来手机端滑动防止拖动页面</p><p>低版本浏览器 <code>e.return Value</code> return false 不考虑兼容性问题但后面的代码也不运行了</p><p>阻止冒泡 <code>e.stopPropagation()</code></p><p>低版本浏览器：<code>e.cancelBubble = true</code></p><p>事件委托：当有五个 li 要有绑定事件时，除了利用 for 循环添加，还可以给父节点设置监听，利用冒泡影响子节点(只操作了一次 dom，提高了浏览器性能)，因为点击是子元素，会通过冒泡传递给父元素。</p><p><strong>鼠标事件</strong></p><p>配合 <code>e.preventDefault()</code>使用 <code>contexmenu</code> 禁用右键 <code>selectstart</code> 禁止选用文字</p><p>鼠标可视区域的 x 和 y 坐标 <code>e.clientX</code> <code>e.clientY</code></p><p>鼠标在页面文档中的 x 和 y 坐标(ie9+支持) <code>e.pageX</code> <code>e.pageY</code></p><p>鼠标距离屏幕的 x 和 y 坐标 <code>e.screenX</code> <code>e.screenY</code></p><p>鼠标移动，<code>mousemove</code> 图片跟随鼠标，将 pagex 和 y 给图片的定位(绝对定位)，记得加单位</p><p><strong>键盘事件</strong></p><p><code>onkeyup</code> 按键弹起触发</p><p><code>onkeydown</code> 按下触发(不弹起会一直触发)</p><p><code>onkeypress</code> 按下触发(不能识别功能键 shift、ctrl)</p><p><code>keycod</code> 用来判断用户的按键的 <code>ASCII</code> 码值，但 <code>keyup</code> 和 <code>keydown</code> 不识别大小写，<code>keypress</code> 会识别</p><h3 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h3><p>浏览器对象模型，核心是 <code>window</code></p><p><code>js</code> 的标准是 <code>ECMA</code>，<code>DOM</code> 的标准是 <code>W3C</code>，<code>BOM</code> 缺乏标准</p><p>全局变量会自动变成 <code>window</code> 的属性和方法</p><p><code>window</code> 有一个特殊的对象 <code>name</code></p><h4 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-label="Permalink to &quot;window 对象&quot;">​</a></h4><p><code>window.onload</code> 窗口加载，只能写一次，有多个 <code>onload</code> 以最后一个为准</p><p>如果有多个需要加载完调用使用 <code>addEventListener</code></p><p>如果需要 dom 树加载完成使用 <code>DOMContentLoaded</code> 事件，加载速度比 load 快</p><p><code>window.onresize</code> 窗口大小发生变化</p><p><code>window.innerWidth </code>当前屏幕宽度(做相应式布局)</p><p><code>window.setTimeout(调用函数，[延迟毫秒数])</code>间隔多久调用函数</p><p><code>setTimeout()</code>为回调函数，多用于几秒后关闭广告</p><p><code>clearTimeout()</code>清楚定时器</p><p><code>setInterval()</code> 每隔一段时间调用这个函数一次</p><p><code>clearInterval()</code> 清除定时器，用于发送短信剩下多少秒</p><h4 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-label="Permalink to &quot;location 对象&quot;">​</a></h4><p><code>location.href</code> 对象可以获取或设置 url</p><p><code>location.search</code> 返回参数</p><p>获取 url 上的参数，去掉<code>?</code>通过 substr 截取掉即 <code>substr(1)</code>，通过等号分割 <code>split</code> 为数组，arr 为参数</p><p><code>location.assign</code> 可重定向页面，可以后退</p><p><code>location.replace</code> 也可重定向页面，不能后退</p><p><code>location.reload</code> 重新刷新页面，如果参数为 true 强制刷新页面</p><h4 id="navigator-对象" tabindex="-1">navigator 对象 <a class="header-anchor" href="#navigator-对象" aria-label="Permalink to &quot;navigator 对象&quot;">​</a></h4><p>浏览器信息，常用 <code>userAgent</code> 判断用户用的是什么终端</p><h4 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;history 对象&quot;">​</a></h4><p><code>history.forword()</code> 前进</p><p><code>history.back()</code> 后退</p><p><code>history.go(数值)</code> 前进一步或后退一步</p><h4 id="网页交互对象" tabindex="-1">网页交互对象 <a class="header-anchor" href="#网页交互对象" aria-label="Permalink to &quot;网页交互对象&quot;">​</a></h4><p><code>offset</code> 偏移量</p><p>父元素要有定位，父元素无定位以 <code>body</code> 为准</p><p><code>offseTop</code> 距离父元素顶部的距离</p><p><code>offseLeft</code> 距离父元素左侧的距离</p><p><code>offsetParent</code> 返回父元素，父元素无定位返回 body</p><p><code>parentNode</code> 父元素无定位是 Node 返回父节点</p><p><code>offset</code> 可以获取任意样式，但不能赋值，赋值用 style</p><p>通常用 <code>offset</code> 和 <code>pagex</code> 来获取鼠标在盒子内的坐标</p><p><code>clicen</code> 属性和 <code>offset</code> 相同，只不过 <code>client</code> 不包含边框，<code>offset</code> 包含边框，获取到的宽度会有所不同</p><p><code>scroll</code> 页面滚动条，可以获得内容的实际大小</p><p><code>scollTop</code> 可视区外的上高度，</p><p><code>scollLeft</code> 可视区外的左宽度</p><p>如果是整个页面滚动则为 <code>window.pageYOffset</code> 给整个页面加 <code>scoll</code> 事件</p><p><code>offse</code> 多用来获取元素位置 left 和 top</p><p><code>client</code> 获取元素大小 width 和 height</p><p><code>scroll</code> 获取滚动距离，top 和 left</p><p><code>mouseover</code> 鼠标经过自身会触发，经过子盒子也会触发(因为子盒子会冒泡到父盒子)</p><p><code>mouseenter</code> 只会在经过本身是触发，和 <code>mouseleave</code> 搭配使用</p><p>立即执行函数，不需要调用，可以传参，多个立即执行函数用分号隔开，立即执行函数独立创建了一个作用域，避免命名冲突</p><p><code>(function(){})()或(function(){}())</code></p><p><code>dpr</code> 为物理像素点</p><p><code>resize</code> 事件监听页面尺寸变化</p><p><code>pageshow</code> 事件，网页重载触发，有 <code>persisted</code> 属性，默认为 true，记载页面是否缓存</p><p>有些浏览器不支持 0.5 像素，需要进行调整</p><p><code>callback&amp;&amp;callback()</code>；利用并集思想的短路原理</p><p>返回顶部 <code>window.scoll(0,0)</code>不加单位，即 y 轴为 0</p><p>如果需要有动画效果效果，添加动画函数即可</p>`,450)]))}const b=a(o,[["render",l]]);export{u as __pageData,b as default};
