import{_ as n,c as a,a2 as l,o as p}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Vue2 踩坑(2)","description":"","frontmatter":{},"headers":[],"relativePath":"src/stack/Vue2踩坑-2.md","filePath":"src/stack/Vue2踩坑-2.md","lastUpdated":1728956809000}'),e={name:"src/stack/Vue2踩坑-2.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue2-踩坑-2" tabindex="-1">Vue2 踩坑(2) <a class="header-anchor" href="#vue2-踩坑-2" aria-label="Permalink to &quot;Vue2 踩坑(2)&quot;">​</a></h1><h2 id="post-请求" tabindex="-1">post 请求 <a class="header-anchor" href="#post-请求" aria-label="Permalink to &quot;post 请求&quot;">​</a></h2><p>参数 data 如果直接写 参数会在请求体 以 JOSN</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> orderList</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> request</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    url: </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    data</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 如果写成parms:data 参数会跟在请求后面 类似get请求</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> orderList</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> request</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    url: </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    parms: data</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="请求发送两次的原因" tabindex="-1">请求发送两次的原因 <a class="header-anchor" href="#请求发送两次的原因" aria-label="Permalink to &quot;请求发送两次的原因&quot;">​</a></h3><p>当前端应用试图从一个源（origin）上的 Web 页面访问另一个源上的资源时，浏览器会执行跨域请求，其中 POST 请求常常会伴随着两次发送：一次 OPTIONS 请求（CORS 预检）和一次实际的 POST 请求。</p><h3 id="cors-预检" tabindex="-1">CORS 预检 <a class="header-anchor" href="#cors-预检" aria-label="Permalink to &quot;CORS 预检&quot;">​</a></h3><p>跨域请求的预检 当 Web 页面中的脚本尝试访问与页面本身不同源（即协议、域名或端口中至少有一个不同）的资源时，浏览器会执行一种称为“同源策略”的安全限制。然而，为了满足某些跨域交互的需求，浏览器引入了 CORS（跨域资源共享）机制。 在 CORS 中，当浏览器遇到某些类型的跨域请求（通常称为“复杂请求”）时，它会首先发送一个 OPTIONS 请求到目标服务器，询问是否允许该跨域请求。这个 OPTIONS 请求被称为“预检请求”（preflight request）。</p><h3 id="复杂请求" tabindex="-1">复杂请求 <a class="header-anchor" href="#复杂请求" aria-label="Permalink to &quot;复杂请求&quot;">​</a></h3><p>复杂请求是指那些不仅仅是简单的 GET 或 POST 请求的请求。</p><p>以下情况通常被视为复杂请求：</p><p>1、使用 POST、PUT、DELETE 等 HTTP 方法。</p><p>2、请求中包含自定义的 HTTP 头字段。</p><p>3、请求体（Body）中包含非文本数据（如 JSON 或 XML）。</p><p>当浏览器检测到跨域请求满足上述任何一个条件时，它就会发送一个 OPTIONS 预检请求。这个预检请求会包含一些特定的 HTTP 头字段，如 Access-Control-Request-Method（表示将要使用的 HTTP 方法）和 Access-Control-Request-Headers（表示将要使用的自定义头字段）。</p><h4 id="服务器响应预检请求" tabindex="-1">服务器响应预检请求 <a class="header-anchor" href="#服务器响应预检请求" aria-label="Permalink to &quot;服务器响应预检请求&quot;">​</a></h4><p>服务器在接收到 OPTIONS 预检请求后，会根据其 CORS 配置来决定是否允许该跨域请求。如果允许，服务器会返回一个包含适当 CORS 头字段的响应，如 Access-Control-Allow-Origin（表示允许哪些源的请求）和 Access-Control-Allow-Methods（表示允许哪些 HTTP 方法）。 一旦服务器响应了预检请求并允许了跨域请求，浏览器就会发送实际的 POST 请求（或其他类型的请求）。</p><h2 id="前后端-sse-通讯" tabindex="-1">前后端 sse 通讯 <a class="header-anchor" href="#前后端-sse-通讯" aria-label="Permalink to &quot;前后端 sse 通讯&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (window.EventSource) {</span></span>
<span class="line"><span style="color:#24292E;">  window.source </span><span style="color:#D73A49;">=</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> EventSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  window.source.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span>
<span class="line"><span style="color:#6A737D;">  // 监听服务器发来的消息 或用source.onmessage=()=&gt;{}</span></span>
<span class="line"><span style="color:#24292E;">  window.source.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span>
<span class="line"><span style="color:#6A737D;">  // 监听异常</span></span>
<span class="line"><span style="color:#24292E;">  window.source.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">window.soure.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 关闭并发请求</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="css-实现盒子固定宽度外左右滑动" tabindex="-1">css 实现盒子固定宽度外左右滑动 <a class="header-anchor" href="#css-实现盒子固定宽度外左右滑动" aria-label="Permalink to &quot;css 实现盒子固定宽度外左右滑动&quot;">​</a></h2><p><code>display: -webkit-box; overflow-x: scroll</code></p><h2 id="将-px-单位转为-rem" tabindex="-1">将 px 单位转为 rem <a class="header-anchor" href="#将-px-单位转为-rem" aria-label="Permalink to &quot;将 px 单位转为 rem&quot;">​</a></h2><p>1、安装 postcss-px2rem</p><p><code>npm i postcss-px2rem --save -dev </code></p><p>2、进入 vue.config.js 配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> px2rem</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss-px2rem&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> postcss</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> px2rem</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  remUnit: </span><span style="color:#005CC5;">10</span><span style="color:#6A737D;"> //基准大小 baseSize，需要下方html除后的数字相同</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* 注意sass，scss，less的配置 */</span></span>
<span class="line"><span style="color:#24292E;">  productionSourceMap: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 生产环境是否生成 sourceMap 文件</span></span>
<span class="line"><span style="color:#24292E;">  css: {</span></span>
<span class="line"><span style="color:#24292E;">    loaderOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      postcss: {</span></span>
<span class="line"><span style="color:#24292E;">        plugins: [postcss]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>3、进入 publci 的 index.html</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> getHtmlFontSize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  //获取设备宽度</span></span>
<span class="line"><span style="color:#D73A49;">  let</span><span style="color:#24292E;"> deviceWidth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientWidth </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.innerWidth</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[设备宽度]&#39;</span><span style="color:#24292E;">, deviceWidth)</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (deviceWidth </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;"> 750</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    deviceWidth </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 750</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#D73A49;"> if</span><span style="color:#24292E;"> (deviceWidth </span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;"> 320</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    deviceWidth </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 320</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  //设置html的字体大小</span></span>
<span class="line"><span style="color:#24292E;">  document.documentElement.style.fontSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deviceWidth </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;"> 37.5</span><span style="color:#D73A49;"> +</span><span style="color:#032F62;"> &#39;px&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">getHtmlFontSize</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resize&#39;</span><span style="color:#24292E;">, getHtmlFontSize)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="滚动至容器底部" tabindex="-1">滚动至容器底部 <a class="header-anchor" href="#滚动至容器底部" aria-label="Permalink to &quot;滚动至容器底部&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> ref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;chatMain&#39;</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scrollEnd(){</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">     const</span><span style="color:#005CC5;"> chat</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.$refs.chatMain</span></span>
<span class="line"><span style="color:#24292E;">     chat.scrollTop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chat.scrollHeight</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">chat.clientHeight</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="获取-url-上的参数" tabindex="-1">获取 url 上的参数 <a class="header-anchor" href="#获取-url-上的参数" aria-label="Permalink to &quot;获取 url 上的参数&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> geturl</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> window.location.href</span></span>
<span class="line"><span style="color:#6A737D;">// http://localhost:8081/#/pages/index/index?id=1001&amp;name=zs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> info</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> geturl.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">//id=1001&amp;name=zs   截取到参数部分</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> getqys</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#D73A49;"> +</span><span style="color:#24292E;"> info) </span><span style="color:#6A737D;">//将参数放在URLSearchParams函数中</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> id</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> getqys.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1001</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> name</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> getqys.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// zs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="设置容器为可编辑并可添加表情及-placehodler" tabindex="-1">设置容器为可编辑并可添加表情及 placehodler <a class="header-anchor" href="#设置容器为可编辑并可添加表情及-placehodler" aria-label="Permalink to &quot;设置容器为可编辑并可添加表情及 placehodler&quot;">​</a></h2><p>1、添加 placehodler</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;editable-div&quot;</span><span style="color:#6F42C1;"> contenteditable</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#6F42C1;"> placegolder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;请输入&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">.editable-div:empty:before {</span></span>
<span class="line"><span style="color:#24292E;">  position: absolute;</span></span>
<span class="line"><span style="color:#24292E;">  content: </span><span style="color:#6F42C1;">attr</span><span style="color:#24292E;">(placegolder);</span></span>
<span class="line"><span style="color:#24292E;">  background</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">color: transparent;</span></span>
<span class="line"><span style="color:#24292E;">  color: #4d4d4d;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>2、添加图片</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> insertImage</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> editableDiv</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;editableDiv&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> imgSrc</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;https://via.placeholder.com/150&#39;</span><span style="color:#6A737D;"> // 这里替换为你要插入的图片的 URL</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 创建一个新的 img 元素</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> img</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> imgSrc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 添加 data-src 属性</span></span>
<span class="line"><span style="color:#24292E;">  img.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data-src&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;xxxxx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 保存当前光标位置</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> sel</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> range</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> sel.</span><span style="color:#6F42C1;">getRangeAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 在光标位置插入 img 元素</span></span>
<span class="line"><span style="color:#24292E;">  range.</span><span style="color:#6F42C1;">insertNode</span><span style="color:#24292E;">(img)</span></span>
<span class="line"><span style="color:#24292E;">  range.</span><span style="color:#6F42C1;">setStartAfter</span><span style="color:#24292E;">(img)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 恢复光标位置</span></span>
<span class="line"><span style="color:#24292E;">  sel.</span><span style="color:#6F42C1;">removeAllRanges</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  sel.</span><span style="color:#6F42C1;">addRange</span><span style="color:#24292E;">(range)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 使 div 重新聚焦</span></span>
<span class="line"><span style="color:#24292E;">  editableDiv.</span><span style="color:#6F42C1;">focus</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>3、data-src 为图片内容传给后端的字段 需要对 div 的内容进行处理</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> dealMsg</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> element</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;editableDiv&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> content</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> element.innerHTML</span></span>
<span class="line"><span style="color:#6A737D;">  // inputValue 为传给后端的字段</span></span>
<span class="line"><span style="color:#005CC5;">  this</span><span style="color:#24292E;">.inputValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果有图片</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (element.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#005CC5;">    this</span><span style="color:#24292E;">.inputValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&lt;img</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*?</span><span style="color:#032F62;">(?:&gt;</span><span style="color:#D73A49;">|</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">&gt;)/</span><span style="color:#D73A49;">gi</span><span style="color:#24292E;">, </span><span style="color:#E36209;">text</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      const</span><span style="color:#005CC5;"> dataSrc</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/data-src=&quot;(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)&quot;/</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#24292E;"> dataSrc[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> dataSrc[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="createelement-创建组件" tabindex="-1">createElement 创建组件 <a class="header-anchor" href="#createelement-创建组件" aria-label="Permalink to &quot;createElement 创建组件&quot;">​</a></h2><p><code>createElement(&#39;&#39;, {}, [])</code>有三个参数</p><p>1、第一个参数可以为 <code>HTML</code> 标签名，如&#39;<code>div</code>&#39; 或者为封装的一个组件名(如组件名为 <code>querySelect</code>，第一个参数就为 <code>querySelect</code>)</p><p>2、第二个参数为第一个参数所创建的模板的属性对象，编写格式为（可以不写，就是不定义属性）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	style：{</span></span>
<span class="line"><span style="color:#6F42C1;">		width</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;80px&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">marginLeft</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;20px&#39;</span></span>
<span class="line"><span style="color:#24292E;">	}，</span></span>
<span class="line"><span style="color:#6A737D;">	//给创建的组件定义名称</span></span>
<span class="line"><span style="color:#24292E;">	ref：</span><span style="color:#032F62;">&#39;dom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">	//给创建的组件定义方法</span></span>
<span class="line"><span style="color:#6F42C1;">	on</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">		receiveData</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>3、第三个参数可以子虚拟节点为一个数组（数组可以 不写，表示在此模板下不定义子模板 ）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">createElement</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">   return</span><span style="color:#6F42C1;"> createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, {}, [</span></span>
<span class="line"><span style="color:#6F42C1;">   	createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Button&#39;</span><span style="color:#24292E;">, {}, []),</span></span>
<span class="line"><span style="color:#6A737D;">   	//同样第二个参数{}定义button的各种属性，可以不写，就是不定义属性，第三个参数[],数组可以</span></span>
<span class="line"><span style="color:#6A737D;">   	//不写，表示在此button模板下不定义子模板</span></span>
<span class="line"><span style="color:#6F42C1;">   	createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Button&#39;</span><span style="color:#24292E;">, {}, []),</span></span>
<span class="line"><span style="color:#6F42C1;">   	createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Button&#39;</span><span style="color:#24292E;">, {}, [])</span></span>
<span class="line"><span style="color:#24292E;">   ])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="使用-createelement-为-elementui-的-notification-组件自定义内部样式" tabindex="-1">使用 createElement 为 ElementUI 的 Notification 组件自定义内部样式 <a class="header-anchor" href="#使用-createelement-为-elementui-的-notification-组件自定义内部样式" aria-label="Permalink to &quot;使用 createElement 为 ElementUI 的 Notification 组件自定义内部样式&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> CustomerComp </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;/customerComp&#39;</span><span style="color:#6A737D;"> // 引入组件并在components内注册</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> h</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.$createElement;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> notify</span><span style="color:#D73A49;"> =</span><span style="color:#005CC5;"> this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$notify</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  title: </span><span style="color:#032F62;">&#39;自定义组件&#39;</span></span>
<span class="line"><span style="color:#24292E;">  message: </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CustomerComp&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      style: </span><span style="color:#032F62;">&#39;color: teal&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ref: </span><span style="color:#032F62;">&#39;CustomerComp&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      pros: {</span></span>
<span class="line"><span style="color:#24292E;">        text: </span><span style="color:#032F62;">&#39;测试一下&#39;</span></span>
<span class="line"><span style="color:#24292E;">      }，</span></span>
<span class="line"><span style="color:#24292E;">      on: {</span></span>
<span class="line"><span style="color:#6F42C1;">        buttonClick</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">          notify.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">// notify为返回的实例 可以直接调用close关闭通知</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,48)]))}const d=n(e,[["render",o]]);export{u as __pageData,d as default};
